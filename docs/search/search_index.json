{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"drat: Drat R Archive Template drat What cute people say when they are pissed off \"Oh Drat, i lost my wallet\" Urban Dictionary Nota Bene Do not fork this repo as a quick start towards creating your drat , fork this repo instead. See below for more. Background The R package ecosystem is one of the cornerstones of the success seen by R. As of July 2020, over 16000 packages are on CRAN , with about one thousand more at BioConductor . Support for multiple repositories is built deeply into R; mostly via the (default) package utils . The update.packages function (along with several others from the utils package) can be used with ease for these three default repositories as well as many others. But it seemed that support for simple creation and use of local repositories was missing. Drat tries to help here and supports two principal modes: GitHub by leveraging gh-pages Other repos by using other storage where you can write and provide html access Please see the next section about how to get started, the package documentation, the drat package page or the blog section on drat for more. Getting Started Do not fork this repo as a quick start towards creating your drat , fork this repo instead. See below for more. See the vignettes Drat FAQ , Drat for Package Authors , Drat for Package Users Drat Step by Step Why Drat? Combining Drat and Travis Drat Lightning Talk at useR!2015 for the FAQ, two principal uses cases, basic motivation and an overview / introduction. The package documentation provides more details. The drat package page has a longer tutorial, and the blog section on drat has even more. Package documentation, help pages, vignettes, and more is also available here . Installation The preferred approach is to install the released package from CRAN via the standard install.packages(\"drat\") command. Quick Start Towards Your Own Drat drat comes with its own repo creation helper function initRepo , but an even shorter path may be to fork an existing repo. This has been done numerous times with this original repo. However, over time this repo accumulated code refinements along with more documentation making it a little unwieldy. So we set up dedicated repo just to facilitate drat forking. Clone it, and you will have a ready-to-use drat repository. Status The package has been available from CRAN since the Spring of 2015 and starting to get some use. Possible improvements, additions and next steps are listed in the TODO.md file. A few drat repositories are starting to appear (besides this one). An incomplete list (looking at the direct forks as well as GitHub search): yutannihilation gschofl csgillespie shabbychef RcppCore arilamstein piccolbo ghrr cloudyr dmlc thospfuller The rOpenSci project uses drat to distribute their code and has written a nice blog post about it. Travis Integration Colin Gillespie integrated Travis CI with drat, see his dratTravis repository for more details, and the contributed vignette Combining Drat and Travis GitHub Actions Mike Mahoney uses drat with GitHub Actions in a 'push' setting , while Zhian Kamvar uses drat with GitHub Actions in a 'pull' setting . Author Dirk Eddelbuettel, with contributions by Felix Ernst, Neal Fultz, Colin Gillespie, Christoph Stepper, Thomas Leeper, Mark van der Loo, Jan Gorecki, and others. License GPL (>= 2)","title":"Index"},{"location":"#drat-drat-r-archive-template","text":"drat What cute people say when they are pissed off \"Oh Drat, i lost my wallet\" Urban Dictionary","title":"drat: Drat R Archive Template"},{"location":"#nota-bene","text":"Do not fork this repo as a quick start towards creating your drat , fork this repo instead. See below for more.","title":"Nota Bene"},{"location":"#background","text":"The R package ecosystem is one of the cornerstones of the success seen by R. As of July 2020, over 16000 packages are on CRAN , with about one thousand more at BioConductor . Support for multiple repositories is built deeply into R; mostly via the (default) package utils . The update.packages function (along with several others from the utils package) can be used with ease for these three default repositories as well as many others. But it seemed that support for simple creation and use of local repositories was missing. Drat tries to help here and supports two principal modes: GitHub by leveraging gh-pages Other repos by using other storage where you can write and provide html access Please see the next section about how to get started, the package documentation, the drat package page or the blog section on drat for more.","title":"Background"},{"location":"#getting-started","text":"Do not fork this repo as a quick start towards creating your drat , fork this repo instead. See below for more. See the vignettes Drat FAQ , Drat for Package Authors , Drat for Package Users Drat Step by Step Why Drat? Combining Drat and Travis Drat Lightning Talk at useR!2015 for the FAQ, two principal uses cases, basic motivation and an overview / introduction. The package documentation provides more details. The drat package page has a longer tutorial, and the blog section on drat has even more. Package documentation, help pages, vignettes, and more is also available here .","title":"Getting Started"},{"location":"#installation","text":"The preferred approach is to install the released package from CRAN via the standard install.packages(\"drat\") command.","title":"Installation"},{"location":"#quick-start-towards-your-own-drat","text":"drat comes with its own repo creation helper function initRepo , but an even shorter path may be to fork an existing repo. This has been done numerous times with this original repo. However, over time this repo accumulated code refinements along with more documentation making it a little unwieldy. So we set up dedicated repo just to facilitate drat forking. Clone it, and you will have a ready-to-use drat repository.","title":"Quick Start Towards Your Own Drat"},{"location":"#status","text":"The package has been available from CRAN since the Spring of 2015 and starting to get some use. Possible improvements, additions and next steps are listed in the TODO.md file. A few drat repositories are starting to appear (besides this one). An incomplete list (looking at the direct forks as well as GitHub search): yutannihilation gschofl csgillespie shabbychef RcppCore arilamstein piccolbo ghrr cloudyr dmlc thospfuller The rOpenSci project uses drat to distribute their code and has written a nice blog post about it.","title":"Status"},{"location":"#travis-integration","text":"Colin Gillespie integrated Travis CI with drat, see his dratTravis repository for more details, and the contributed vignette Combining Drat and Travis","title":"Travis Integration"},{"location":"#github-actions","text":"Mike Mahoney uses drat with GitHub Actions in a 'push' setting , while Zhian Kamvar uses drat with GitHub Actions in a 'pull' setting .","title":"GitHub Actions"},{"location":"#author","text":"Dirk Eddelbuettel, with contributions by Felix Ernst, Neal Fultz, Colin Gillespie, Christoph Stepper, Thomas Leeper, Mark van der Loo, Jan Gorecki, and others.","title":"Author"},{"location":"#license","text":"GPL (>= 2)","title":"License"},{"location":"changelog/","text":"2024 2024-10-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.5 * tests/skeleton_git2r.R (runTest): Improved conditioning on package `git2r` being present * README.md: Update one URL to its now-current location 2024-08-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-06-18 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to r-ci-setup action 2024-05-19 Dirk Eddelbuettel edd@debian.org * README.md: Use tinyverse.netlify.app for dependency badge 2024-01-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4 2023 2023-10-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version 2023-10-28 Arne Johannes Holmin arnejh@hi.no * R/insertPackage.R: Added the the optional argument OSflavour 2023-10-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.4 * README.md: Add two blog posts in new section on GitHub Actions * vignettes/CombiningDratAndTravis.md: Update Travis URL * vignettes/DratForPackageAuthors.md: Ditto * README.md: Ditto, also update urbandictionary.com URL * R/pruneRepo.R: Minor line-length edit to appease R CMD check * man/pruneRepo.Rd: Regenerated 2023-10-08 Dirk Eddelbuettel edd@debian.org * README.md: Add r-universe badge 2023-05-15 Dirk Eddelbuettel edd@debian.org * tests/skeleton_git2r.R (testRepoActions): Additional tweak 2023-05-15 Arne Johannes Holmin arnejh@hi.no * tests/skeleton_git2r.R (testRepoActions): Adjust for macOS-oldrel 2023-05-12 Arne Johannes Holmin arnejh@hi.no * R/archivePackages.R: Add support for big-sur-x86_64 * R/insertPackage.R: Idem * R/pruneRepo.R: Idem * man/archivePackages.Rd: Documentation * man/pruneRepo.Rd: Documentation * tests/testBig-sur-x86_64Binary.R: Added tests * inst/extdata/big-sur-x86_64/bin/4.3/bar_1.1.tgz: Test support * inst/extdata/src/bar_1.1.tar.g: Idem 2023-01-28 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Remove libgit2-dev as r2u is current 2023-01-26 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): (Temporarily) Install libgit2-dev * R/insertPackage.R (insertPackage): Correct a setwd() placement 2022 2022-11-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-19 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.md: Correct typo * vignettes/DratFAQ.html: Ditto * docs/mkdmt-src/src/vignettes/dratfaq.md: Ditto * docs/vignettes/dratfaq/index.html: Ditto 2022-09-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2022-09-21 Joey Reid joey.reid@metrotransit.org * R/pruneRepo.R: Add support for macOS binaries on arm64 * R/archivePackages.R: Idem * tests/testArmBinary.R: Idem * man/pruneRepo.Rd: Idem * man/archivePackages.Rd: Idem 2022-04-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.3 2022-04-07 Josh Errickson josh@errickson.net * R/insertPackages.R: Refinenment for Arm M1 * man/pruneRepo.Rd: Idem 2022-04-06 Zhengjia Wang zw23@rice.edu * R/archivePackages.R: Initial Support for Arm M1 * R/insertPackages.R: Idem * R/pruneRepo.R: Idem [ Originally committed Aug 2021, merged now ] 2022-04-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * tests/testArmBinary.R: New test for binaries on Arm 2022-04-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/extdata/4.1/arm64/foo_1.3.tgz: Added new test package * inst/extdata/big-sur-arm64/bin/4.1/bat_1.3.tgz: Idem * inst/extdata/src/foo_1.3.tar.gz: Idem * inst/extdata/src/bar_1.0.tar.gz: Idem * tests/skeleton_git2r.R: Adjusting to new test packages 2021 2021-12-02 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/dratforusers.md: Also fix typo here 2021-12-02 Noam Ross noam.ross@gmail.com * vignettes/DratForPackageUsers.md: Fix one-char typo (from 2015 !!) 2021-12-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.2 2021-11-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (VignetteBuilder): Converted to simplermarkdown engine * vignettes/*md: Idem * vignettes/*html: Updated * vignettes/water.css: Added * vignettes/Makefile.hidden: Updated, and renamed 2021-11-05 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-07-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.1 * R/initRepo.R (initRepo): Create a placeholder index.html file in the top-level directory to appease CRAN check of URL * R/insertPackage.R (insertPackage): Show a message if no top-level file index.html is found in the given repo directory. * vignettes/DratStepByStep.Rmd: Mention that a placeholder index.html file is now installed. 2021-04-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/insertPackage.R (getPackageInfo,identifyPackageType): Mark two functions as internal as they are not exported via NAMESPACE * man/getPackageInfo.Rd: Idem * man/identifyPackageType.Rd: Idem 2021-04-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.0 * DESCRIPTION (Suggests): Add rmarkdown as required by knitr change * inst/NEWS.Rd: Update NEWS.Rd * tests/version.R: Add test to ensure NEWS file is current 2021-04-11 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Remove 'draft' from date filed 2021-04-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/CombiningDratAndTravis.Rmd: Use to minidown and water * vignettes/DratFAQ.Rmd: Idem * vignettes/DratForPackageAuthors.Rmd: Idem * vignettes/DratForPackageUsers.Rmd: Idem * vignettes/WhyDrat.Rmd: Idem * DESCRIPTION (Suggests): Add minidown (which implies rmarkdown) * DESCRIPTION (Depends): Increase to R (>= 3.6) * README.md: Sanitize some links for r-devel link checker * man/drat-package.Rd: Idem * vignettes/DratFAQ.Rmd: Idem * vignettes/DratForPackageAuthors.Rmd: Idem * vignettes/DratStepByStep.Rmd: Idem * vignettes/WhyDrat.Rmd: Idem 2021-04-08 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Fix more typos thanks to Roman 2021-04-08 Felix Ernst felix.gm.ernst@outlook.com tests/skeleton_git2r.R: Refactored and restructed for docs/ use R/insertPackage.R: Add error message if DESCRIPTION not found 2021-04-07 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Add new 'step-by-step' vignette written with Roman Hornung 2021-03-29 Dirk Eddelbuettel edd@debian.org * vignettes/CombiningDratAndTravis.Rmd: Note on docs/, https:// use * vignettes/DratFAQ.Rmd: Ditto * vignettes/DratForPackageAuthors.Rmd: Ditto * vignettes/DratForPackageUsers.Rmd: Ditto * vignettes/WhyDrat.Rmd: Ditto 2021-03-28 Dirk Eddelbuettel edd@debian.org * tests/skeleton_git2r.R (testRepoActions): More work supporting new (optional) docs/ location * docs/mkdmt-src/: Moved mkdocs-material input 2021-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL): Add link to repo 2021-03-14 Dirk Eddelbuettel edd@debian.org * README.md: Mention drat-base/drat for easier forking * R/archivePackages.R (.check_location_arg): Add helper function * R/initRepo.R (initRepo): Use helper function * R/insertPackage.R (insertPackage): Ditto * R/pruneRepo.R (getRepoInfo): Ditto, use option location 2021-03-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/initRepo.R (initRepo): New option location to allow use of docs/ directory instead of gh-pages branch * R/insertPackage.R (insertPackage): Ditto * man/initRepo.Rd: Documentation for new location option * man/insertPackage.Rd: Ditto 2021-02-24 Dirk Eddelbuettel edd@debian.org * docs-src/mkdocs.yml: No longer show vignette overview 2020 2020-12-26 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Add CI runner using r-ci * README.md: Add new CI badge 2020-09-13 Dirk Eddelbuettel edd@debian.org * docs/: Added package website * docs-src/: Added package website inputs * README.md: Added badge and short sentence linking to documentation 2020-07-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.8 2020-07-17 Felix Ernst felix.gm.ernst@outlook.com * tests/skeleton_get2r.R: Fixed issue for pruning on r-oldrel 2020-07-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.7 * tests/skeleton_git2r.R (testRepoActions): More explicit conditioning on presence of optional git2r 2020-07-05 Felix Ernst felix.gm.ernst@outlook.com * man/insertPackages.Rd: document optional arguments more clearly * man/pruneRepo.Rd: document optional arguments more clearly * R/insertPackages.R: minor refactoring * R/pruneRepo.R: minor refactoring 2020-07-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-07-01 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Cover special case of adding to archive * R/pruneRepo.R: Idem * tests/skeleton_get2r.R: Idem 2020-06-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-06-20 Felix Ernst felix.gm.ernst@outlook.com * R/pruneRepo.R: New function updateRepo, minor refactoring * R/insertPackages.R: Idem * R/archivePackages.R: Idem * man/pruneRepo.Rd: Document updateRepo * NAMESPACE: Add updateRepo 2020-06-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * drat.Rproj: Undo accidental delete in preceding commit storms 2020-06-09 Felix Ernst felix.gm.ernst@outlook.com * R/insertPackages.R: Updates to insertPackages function * man/insertPackages.Rd: Idem * R/archivePackages.R: Bug fixes * R/prunePackages.R: Idem * tests/skeleton_git2r.R: Added tests for insertPackages, archivePackages and pruneRepo * inst/extdata/*: Added toy packages to support tests 2020-06-08 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Refactored vectorisation * R/prunePackages.R: Idem * man/addRepo.Rd: Updated * man/archivePackages.Rd: Idem * man/pruneRepo.Rd: Idem * R/insertPackages.R: Added insertPackages function * man/insertPackages.Rd: Idem 2020-06-07 Dirk Eddelbuettel edd@debian.org * man/addRepo.Rd: Updated * man/archivePackages.Rd: Idem * man/insertPackages.Rd: Idem * man/pruneRepo.Rd: Idem 2020-06-05 Patrick Schratz patrick.schratz@gmail.com * R/archivePackages.R: First pass at vectorising operations * R/insertPackages.R: Idem * R/prunePackages.R: Idem * NAMESPACE: Idem 2020-05-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.6 * README.md: Add Felix Ernst to Authors 2020-05-29 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Updated mac binary format support * R/insertPackages.R: Idem * R/pruneRepo.R: Idem * man/*: Updated documentation * DESCRIPTION: Roll minor version 2020-05-25 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge * .travis.yml: Switch to bionic and R 4.0.0 2020-04-23 Thomas P. Fuller thomas.fuller@coherentlogic.com * README.md: Add entry for thospfuller/drat 2019 2019-03-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.5 * README.md: Mention Christoph in Author section * NAMESPACE: Also import contrib.url() from utils 2019-03-27 Christoph Stepper christoph.stepper@gfk.com * R/archivePackages.R: Simplification of argument use * R/pruneRepo.R: Idem * R/insertPackage.R: Idem * man/archivePackages.Rd: Idem * man/pruneRepo.Rd: Idem 2019-03-25 Christoph Stepper christoph.stepper@gfk.com * R/archivePackages.R: Support binary packages * R/pruneRepo.R: Idem * man/archivePackages.Rd: Added documentation * man/pruneRepo.Rd: Idem * man/*.Rd: Rebuilt under current roxygen2 2019-03-23 Dirk Eddelbuettel edd@debian.org * README.md: Add dependencies badge * tests/skeleton_git2r.R (testSkeletonGit2r): Ensure 'R' is prefixed by proper path as recommended in Section 1.6 of Writing R Extensions 2018 2018-03-12 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Minor documentation update * man/addRepo.Rd: Idem 2018-01-30 Neal Fultz nfultz@gmail.com * R/insertPackage.R: Correct working directoru for git2r * tests/skeleton_git2r.R: Add end-to-end test 2017 2017-12-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.4 2017-12-15 Neal Fultz nfultz@gmail.com * R/insertPackage.R: Split macOS binaries along R version into mavericks and el-capitan repos; allow for global option() value dratBranch to select a branch to commit to 2017-10-07 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Always add PACKAGES.rds 2017-09-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.3 * R/insertPackage.R (insertPackage): Consider PACKAGES.rds too * README.md: Remove one now-defunct drat repo from list 2017-02-23 Dirk Eddelbuettel edd@debian.org * .travis.yml (before_install): Use https to fetch script 2016 2016-10-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.2 * vignettes/DratFAQ.Rmd (vignette): Added 'Why use drat' section at the top based on a suggestion by Ben Marwick 2016-10-24 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * README.md: More canonical URLs, and omegahat.net correction * vignettes/DratFAQ.Rmd (vignette): More canonical URLs * vignettes/DratForPackageAuthors.Rmd (drat): Ditto 2016-08-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Suggests): Add rmarkdown 2016-08-13 Dirk Eddelbuettel edd@debian.org * R/pruneRepo.R: Extend documentation to also mention option remove=\"git\" to invoke git2r::rm (where available) 2016-08-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Release 0.1.1 * DESCRIPTION: Add URL and BugReports links * inst/NEWS.Rd: Added * README.md: Use canonical CRAN URL * vignettes/DratFAQ.Rmd: Ditto * vignettes/DratFAQ.Rmd: Update question on Additional_repositories as the original example moved on 2016-08-01 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch to using run.sh for Travis CI 2016-07-31 Jan Gorecki j.gorecki@wit.edu.pl * R/insertPackage.R: Support additional fields * man/insertPackage.Rd: Idem 2016-06-02 Colin Gillespie csgillespie@gmail.com * R/addRepo: Use https URLs 2016-03-09 Antonio Piccolboni antonio@piccolboni.info * R/pruneRepo.R: Generalize regexp to allow dots in package names 2016-02-28 Dirk Eddelbuettel edd@debian.org * vignettes/DratForPackageAuthors.Rmd: Correct file:// URL * vignettes/DratForPackageUsers.Rmd: Idem 2016-02-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Add versioned Depends: on R (>= 3.2.0) 2016-02-26 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Use dir.exists() for directory test (with thanks to Kevin Wright) 2015 2015-08-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.1.0 * vignettes/DratFAQ.Rmd (vignette): Updated with respect to support for binary packages on OS X and Windows; added commit message entry * inst/scripts/getCommitMessageForDrat.sh: Added * README.md: Updated 2015-08-03 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (getPathForPackage): In case of non-compiled OS X package, issue a message that it will be install in Mavericks path. 2015-08-02 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (getPackageInfo): New function, building on earlier code by Matt Jones and Jan Schulz (getPathForPackage): Simplified earlier function by Jan and Dirk (insertPackage): Use new / modified functions * NAMESPACE: Import two functions from utils to please R CMD check * vignettes/DratForPackageAuthors.Rmd (drat): Use canonical CRAN URL to please R CMD check even more 2015-07-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Author): Finally credit all contributors; (Version): Roll minor version (Date): Update Date 2015-07-29 Matt Jones gitcode@magisa.org * R/insertPackage.R: Better support for OS X binaries via getPathForMac() function which untars the tgz file, extracts the Built: line from the description, and determines if the build platform was \"darwin13\", in which case \"mavericks\" is included on the returned path. 2015-07-25 Thomas Leeper thosjleeper@gmail.com * R/archivePackages.R: New function to (optionally) archive existing packages when a new one gets added. * R/insertPackages.R: Support archivePackages() * R/pruneRepo.R: Support archivePackages() 2015-06-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Correct use from .Call to call. with a big Doh! and thanks to Guy Dawson for PR #25 2015-05-26 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Add a short paragraph about miniCRAN 2015-05-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.4 * README.md: Corrected one URL, added link to drat FAQ 2015-05-24 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Added new section 2015-05-23 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: In non-GH mode, explicitly check for spaces in the URL and abort if found as file-based access with spaces breaks. * R/addRepo.R: State that file-based URL has to be 'file:/some/path' * man/addRepo.Rd: Ditto 2015-05-12 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Small edits 2015-05-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Roll Date and Version * NAMESPACE: Also export new functions pruneRepo and initRepo * R/pruneRepo.R (pruneRepo): Added (untested so far) removal * man/pruneRepo.Rd: Initial documentation * R/initRepo.R (initRepo): (Very) initial version of a repo creator * man/initRepo.Rd: Initial documentation * R/insertPackage.R (identifyPackageType): Fix documentation typo 2015-04-28 Carl Boettiger cboettig@gmail.com * R/insertPackage.R (insertPackage): Protect git2r::commit() call with tryCatch() to gracefully deal with error conditions 2015-04-27 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd: Beginnings of a Drat FAQ vignette 2015-04-26 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Some tweaking 2015-04-26 Jan Schulz jasc@gmx.net * R/insertPackage.R (insertPackage): Support Windows and Mac OS X binary packages 2015-04-10 Dirk Eddelbuettel edd@debian.org * vignettes/rmd2html.r: Added to process vignettes * vignettes/*.Rmd: Correct VignetteIndexEntry * vignettes/*.html: Added html versions prior to build 2015-04-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.3 * vignettes/DratForPackageUsers.Rmd: Added new vignette detailing drat use for package users (ie someone installing from a drat) 2015-04-08 Dirk Eddelbuettel edd@debian.org * vignettes/DratForPackageAuthors.Rmd: Added new vignette detailing drat use for package authors (ie someone writing to a drat) 2015-03-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Added knitr to Suggests: and VignetteBuilder: * .travis.yml: Added knitr 2015-03-27 Dirk Eddelbuettel edd@debian.org * vignettes/WhyDrat.Rmd: Adding post by Steven as vignette * vignettes/CombiningDratAndTravis.Rmd: Adding (work-in-progress) post by Colin 2015-03-26 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Added/extended/clarified example * man/addRepo.Rd: Corresponding Rd file 2015-03-22 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R: Support setting a commit message * inst/scripts/git2targz.sh: Beginnings of helper script to create a tarball (suitable for a drat repo) given a repo URL 2015-03-16 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Use on.exit() with setwd() to ensure we return to current working directory (closes #9) 2015-03-14 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Added examples (inside \\dontrun{}) to help page * R/insertPackage.R: Idem 2015-03-12 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Add quietly=TRUE to requireNamespace 2015-03-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Correction to file operations and path settings (cf GH issue #7) 2015-03-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Re-enable git2r::checkout() 2015-02-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.2 * R/insertPackage.R: Document git2r in help page, don't use git2r for checkout yet though (cf git2r issue #109) * R/pruneRepo.R: Default path for repo also contains src/contrib/; generalize regular expression for source tarball * inst/TODO.md: Updated with recent changes 2015-02-27 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R: Use git2r if available * DESCRIPTION: Add Suggests: on git2r * DESCRIPTION (Version,Date): Bump Date: and Version: * .travis.yml: Also install git2r 2015-02-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version,Date): Bump Date: and Version: * R/insertPackage.R (insertPackage): Correct directory location for the (optional) git commands 2015-02-10 Dirk Eddelbuettel edd@debian.org * R/pruneRepo.R (.pruneRepo): Beginnings of a helper function to identify older versions of given packages in a repo directory * inst/TODO.md: Added item to generalize sources beyond .tar.gz 2015-02-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Bumping Version and Date 2015-02-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Description): Remove continuation lines which trigger a bug in devtools (cf issue tick #1) * man/drat-package.Rd (Maintainer): Correction from pull request #2 by Colin Gillespie applied * R/addRepo.R: Clarify alturl argument as per issue ticket #3 * man/addRepo.Rd: Ditto 2015-02-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Version 0.0.1 * DESCRIPTION (Description): And another editing of Description: 2015-02-02 Dirk Eddelbuettel edd@debian.org * R/addRepo.R (addRepo): Use http, not https, at GitHub * man/drat-package.Rd: Ditto 2015-02-01 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Renamed from insertRelesae() * NAMESPACE: Explicitly expotr addRepo() and insertPackage() * R/addRepo.R (add): Also provide unexported alias drat:::add() * R/insertPackage.R (insert): Ditto for drat:::insert() * inst/TODO.md: Moved from top-level * tests/simpleTests.R (testInsertLocal): Expanded tests * .travis.yml (script): Added Travis CI support * .Rbuildignore: Added to exclude Travis file 2015-01-30 Dirk Eddelbuettel edd@debian.org * R/addRepo.R (addRepo): Renamed from add.R; function now addRepo() * R/insertRelease.R (insertRelease): Renamed from insert.R, function renamed too to stress that repos contains releases not commits * tests/simpleTests.R: Changed to use addRepo() 2015-01-29 Dirk Eddelbuettel edd@debian.org * R/insert.R (insert): Small enhancements / corrections 2015-01-28 Dirk Eddelbuettel edd@debian.org * R/insert.R (insert): Offer optional git add, commit push * R/add.R (add): Allow for multiple accounts added at once * tests/simpleTests.R: Added first simple test script * man/drat-package.Rd: Updated 2015-01-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Beginnings of what will become version 0.0.1 * R/add.R: Initial version * R/insert.R: Ditto * TODO.md: Added with some first notes","title":"Changelog"},{"location":"changelog/#2024","text":"2024-10-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.5 * tests/skeleton_git2r.R (runTest): Improved conditioning on package `git2r` being present * README.md: Update one URL to its now-current location 2024-08-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-06-18 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to r-ci-setup action 2024-05-19 Dirk Eddelbuettel edd@debian.org * README.md: Use tinyverse.netlify.app for dependency badge 2024-01-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4","title":"2024"},{"location":"changelog/#2023","text":"2023-10-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version 2023-10-28 Arne Johannes Holmin arnejh@hi.no * R/insertPackage.R: Added the the optional argument OSflavour 2023-10-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.4 * README.md: Add two blog posts in new section on GitHub Actions * vignettes/CombiningDratAndTravis.md: Update Travis URL * vignettes/DratForPackageAuthors.md: Ditto * README.md: Ditto, also update urbandictionary.com URL * R/pruneRepo.R: Minor line-length edit to appease R CMD check * man/pruneRepo.Rd: Regenerated 2023-10-08 Dirk Eddelbuettel edd@debian.org * README.md: Add r-universe badge 2023-05-15 Dirk Eddelbuettel edd@debian.org * tests/skeleton_git2r.R (testRepoActions): Additional tweak 2023-05-15 Arne Johannes Holmin arnejh@hi.no * tests/skeleton_git2r.R (testRepoActions): Adjust for macOS-oldrel 2023-05-12 Arne Johannes Holmin arnejh@hi.no * R/archivePackages.R: Add support for big-sur-x86_64 * R/insertPackage.R: Idem * R/pruneRepo.R: Idem * man/archivePackages.Rd: Documentation * man/pruneRepo.Rd: Documentation * tests/testBig-sur-x86_64Binary.R: Added tests * inst/extdata/big-sur-x86_64/bin/4.3/bar_1.1.tgz: Test support * inst/extdata/src/bar_1.1.tar.g: Idem 2023-01-28 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Remove libgit2-dev as r2u is current 2023-01-26 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): (Temporarily) Install libgit2-dev * R/insertPackage.R (insertPackage): Correct a setwd() placement","title":"2023"},{"location":"changelog/#2022","text":"2022-11-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-19 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.md: Correct typo * vignettes/DratFAQ.html: Ditto * docs/mkdmt-src/src/vignettes/dratfaq.md: Ditto * docs/vignettes/dratfaq/index.html: Ditto 2022-09-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2022-09-21 Joey Reid joey.reid@metrotransit.org * R/pruneRepo.R: Add support for macOS binaries on arm64 * R/archivePackages.R: Idem * tests/testArmBinary.R: Idem * man/pruneRepo.Rd: Idem * man/archivePackages.Rd: Idem 2022-04-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.3 2022-04-07 Josh Errickson josh@errickson.net * R/insertPackages.R: Refinenment for Arm M1 * man/pruneRepo.Rd: Idem 2022-04-06 Zhengjia Wang zw23@rice.edu * R/archivePackages.R: Initial Support for Arm M1 * R/insertPackages.R: Idem * R/pruneRepo.R: Idem [ Originally committed Aug 2021, merged now ] 2022-04-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * tests/testArmBinary.R: New test for binaries on Arm 2022-04-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/extdata/4.1/arm64/foo_1.3.tgz: Added new test package * inst/extdata/big-sur-arm64/bin/4.1/bat_1.3.tgz: Idem * inst/extdata/src/foo_1.3.tar.gz: Idem * inst/extdata/src/bar_1.0.tar.gz: Idem * tests/skeleton_git2r.R: Adjusting to new test packages","title":"2022"},{"location":"changelog/#2021","text":"2021-12-02 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/dratforusers.md: Also fix typo here 2021-12-02 Noam Ross noam.ross@gmail.com * vignettes/DratForPackageUsers.md: Fix one-char typo (from 2015 !!) 2021-12-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.2 2021-11-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (VignetteBuilder): Converted to simplermarkdown engine * vignettes/*md: Idem * vignettes/*html: Updated * vignettes/water.css: Added * vignettes/Makefile.hidden: Updated, and renamed 2021-11-05 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-07-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.1 * R/initRepo.R (initRepo): Create a placeholder index.html file in the top-level directory to appease CRAN check of URL * R/insertPackage.R (insertPackage): Show a message if no top-level file index.html is found in the given repo directory. * vignettes/DratStepByStep.Rmd: Mention that a placeholder index.html file is now installed. 2021-04-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/insertPackage.R (getPackageInfo,identifyPackageType): Mark two functions as internal as they are not exported via NAMESPACE * man/getPackageInfo.Rd: Idem * man/identifyPackageType.Rd: Idem 2021-04-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.0 * DESCRIPTION (Suggests): Add rmarkdown as required by knitr change * inst/NEWS.Rd: Update NEWS.Rd * tests/version.R: Add test to ensure NEWS file is current 2021-04-11 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Remove 'draft' from date filed 2021-04-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/CombiningDratAndTravis.Rmd: Use to minidown and water * vignettes/DratFAQ.Rmd: Idem * vignettes/DratForPackageAuthors.Rmd: Idem * vignettes/DratForPackageUsers.Rmd: Idem * vignettes/WhyDrat.Rmd: Idem * DESCRIPTION (Suggests): Add minidown (which implies rmarkdown) * DESCRIPTION (Depends): Increase to R (>= 3.6) * README.md: Sanitize some links for r-devel link checker * man/drat-package.Rd: Idem * vignettes/DratFAQ.Rmd: Idem * vignettes/DratForPackageAuthors.Rmd: Idem * vignettes/DratStepByStep.Rmd: Idem * vignettes/WhyDrat.Rmd: Idem 2021-04-08 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Fix more typos thanks to Roman 2021-04-08 Felix Ernst felix.gm.ernst@outlook.com tests/skeleton_git2r.R: Refactored and restructed for docs/ use R/insertPackage.R: Add error message if DESCRIPTION not found 2021-04-07 Dirk Eddelbuettel edd@debian.org * vignettes/DratStepByStep.Rmd: Add new 'step-by-step' vignette written with Roman Hornung 2021-03-29 Dirk Eddelbuettel edd@debian.org * vignettes/CombiningDratAndTravis.Rmd: Note on docs/, https:// use * vignettes/DratFAQ.Rmd: Ditto * vignettes/DratForPackageAuthors.Rmd: Ditto * vignettes/DratForPackageUsers.Rmd: Ditto * vignettes/WhyDrat.Rmd: Ditto 2021-03-28 Dirk Eddelbuettel edd@debian.org * tests/skeleton_git2r.R (testRepoActions): More work supporting new (optional) docs/ location * docs/mkdmt-src/: Moved mkdocs-material input 2021-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL): Add link to repo 2021-03-14 Dirk Eddelbuettel edd@debian.org * README.md: Mention drat-base/drat for easier forking * R/archivePackages.R (.check_location_arg): Add helper function * R/initRepo.R (initRepo): Use helper function * R/insertPackage.R (insertPackage): Ditto * R/pruneRepo.R (getRepoInfo): Ditto, use option location 2021-03-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/initRepo.R (initRepo): New option location to allow use of docs/ directory instead of gh-pages branch * R/insertPackage.R (insertPackage): Ditto * man/initRepo.Rd: Documentation for new location option * man/insertPackage.Rd: Ditto 2021-02-24 Dirk Eddelbuettel edd@debian.org * docs-src/mkdocs.yml: No longer show vignette overview","title":"2021"},{"location":"changelog/#2020","text":"2020-12-26 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Add CI runner using r-ci * README.md: Add new CI badge 2020-09-13 Dirk Eddelbuettel edd@debian.org * docs/: Added package website * docs-src/: Added package website inputs * README.md: Added badge and short sentence linking to documentation 2020-07-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.8 2020-07-17 Felix Ernst felix.gm.ernst@outlook.com * tests/skeleton_get2r.R: Fixed issue for pruning on r-oldrel 2020-07-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.7 * tests/skeleton_git2r.R (testRepoActions): More explicit conditioning on presence of optional git2r 2020-07-05 Felix Ernst felix.gm.ernst@outlook.com * man/insertPackages.Rd: document optional arguments more clearly * man/pruneRepo.Rd: document optional arguments more clearly * R/insertPackages.R: minor refactoring * R/pruneRepo.R: minor refactoring 2020-07-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-07-01 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Cover special case of adding to archive * R/pruneRepo.R: Idem * tests/skeleton_get2r.R: Idem 2020-06-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-06-20 Felix Ernst felix.gm.ernst@outlook.com * R/pruneRepo.R: New function updateRepo, minor refactoring * R/insertPackages.R: Idem * R/archivePackages.R: Idem * man/pruneRepo.Rd: Document updateRepo * NAMESPACE: Add updateRepo 2020-06-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * drat.Rproj: Undo accidental delete in preceding commit storms 2020-06-09 Felix Ernst felix.gm.ernst@outlook.com * R/insertPackages.R: Updates to insertPackages function * man/insertPackages.Rd: Idem * R/archivePackages.R: Bug fixes * R/prunePackages.R: Idem * tests/skeleton_git2r.R: Added tests for insertPackages, archivePackages and pruneRepo * inst/extdata/*: Added toy packages to support tests 2020-06-08 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Refactored vectorisation * R/prunePackages.R: Idem * man/addRepo.Rd: Updated * man/archivePackages.Rd: Idem * man/pruneRepo.Rd: Idem * R/insertPackages.R: Added insertPackages function * man/insertPackages.Rd: Idem 2020-06-07 Dirk Eddelbuettel edd@debian.org * man/addRepo.Rd: Updated * man/archivePackages.Rd: Idem * man/insertPackages.Rd: Idem * man/pruneRepo.Rd: Idem 2020-06-05 Patrick Schratz patrick.schratz@gmail.com * R/archivePackages.R: First pass at vectorising operations * R/insertPackages.R: Idem * R/prunePackages.R: Idem * NAMESPACE: Idem 2020-05-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.1.6 * README.md: Add Felix Ernst to Authors 2020-05-29 Felix Ernst felix.gm.ernst@outlook.com * R/archivePackages.R: Updated mac binary format support * R/insertPackages.R: Idem * R/pruneRepo.R: Idem * man/*: Updated documentation * DESCRIPTION: Roll minor version 2020-05-25 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge * .travis.yml: Switch to bionic and R 4.0.0 2020-04-23 Thomas P. Fuller thomas.fuller@coherentlogic.com * README.md: Add entry for thospfuller/drat","title":"2020"},{"location":"changelog/#2019","text":"2019-03-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.5 * README.md: Mention Christoph in Author section * NAMESPACE: Also import contrib.url() from utils 2019-03-27 Christoph Stepper christoph.stepper@gfk.com * R/archivePackages.R: Simplification of argument use * R/pruneRepo.R: Idem * R/insertPackage.R: Idem * man/archivePackages.Rd: Idem * man/pruneRepo.Rd: Idem 2019-03-25 Christoph Stepper christoph.stepper@gfk.com * R/archivePackages.R: Support binary packages * R/pruneRepo.R: Idem * man/archivePackages.Rd: Added documentation * man/pruneRepo.Rd: Idem * man/*.Rd: Rebuilt under current roxygen2 2019-03-23 Dirk Eddelbuettel edd@debian.org * README.md: Add dependencies badge * tests/skeleton_git2r.R (testSkeletonGit2r): Ensure 'R' is prefixed by proper path as recommended in Section 1.6 of Writing R Extensions","title":"2019"},{"location":"changelog/#2018","text":"2018-03-12 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Minor documentation update * man/addRepo.Rd: Idem 2018-01-30 Neal Fultz nfultz@gmail.com * R/insertPackage.R: Correct working directoru for git2r * tests/skeleton_git2r.R: Add end-to-end test","title":"2018"},{"location":"changelog/#2017","text":"2017-12-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.4 2017-12-15 Neal Fultz nfultz@gmail.com * R/insertPackage.R: Split macOS binaries along R version into mavericks and el-capitan repos; allow for global option() value dratBranch to select a branch to commit to 2017-10-07 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Always add PACKAGES.rds 2017-09-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.3 * R/insertPackage.R (insertPackage): Consider PACKAGES.rds too * README.md: Remove one now-defunct drat repo from list 2017-02-23 Dirk Eddelbuettel edd@debian.org * .travis.yml (before_install): Use https to fetch script","title":"2017"},{"location":"changelog/#2016","text":"2016-10-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.2 * vignettes/DratFAQ.Rmd (vignette): Added 'Why use drat' section at the top based on a suggestion by Ben Marwick 2016-10-24 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * README.md: More canonical URLs, and omegahat.net correction * vignettes/DratFAQ.Rmd (vignette): More canonical URLs * vignettes/DratForPackageAuthors.Rmd (drat): Ditto 2016-08-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Suggests): Add rmarkdown 2016-08-13 Dirk Eddelbuettel edd@debian.org * R/pruneRepo.R: Extend documentation to also mention option remove=\"git\" to invoke git2r::rm (where available) 2016-08-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Release 0.1.1 * DESCRIPTION: Add URL and BugReports links * inst/NEWS.Rd: Added * README.md: Use canonical CRAN URL * vignettes/DratFAQ.Rmd: Ditto * vignettes/DratFAQ.Rmd: Update question on Additional_repositories as the original example moved on 2016-08-01 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch to using run.sh for Travis CI 2016-07-31 Jan Gorecki j.gorecki@wit.edu.pl * R/insertPackage.R: Support additional fields * man/insertPackage.Rd: Idem 2016-06-02 Colin Gillespie csgillespie@gmail.com * R/addRepo: Use https URLs 2016-03-09 Antonio Piccolboni antonio@piccolboni.info * R/pruneRepo.R: Generalize regexp to allow dots in package names 2016-02-28 Dirk Eddelbuettel edd@debian.org * vignettes/DratForPackageAuthors.Rmd: Correct file:// URL * vignettes/DratForPackageUsers.Rmd: Idem 2016-02-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Add versioned Depends: on R (>= 3.2.0) 2016-02-26 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Use dir.exists() for directory test (with thanks to Kevin Wright)","title":"2016"},{"location":"changelog/#2015","text":"2015-08-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.1.0 * vignettes/DratFAQ.Rmd (vignette): Updated with respect to support for binary packages on OS X and Windows; added commit message entry * inst/scripts/getCommitMessageForDrat.sh: Added * README.md: Updated 2015-08-03 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (getPathForPackage): In case of non-compiled OS X package, issue a message that it will be install in Mavericks path. 2015-08-02 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (getPackageInfo): New function, building on earlier code by Matt Jones and Jan Schulz (getPathForPackage): Simplified earlier function by Jan and Dirk (insertPackage): Use new / modified functions * NAMESPACE: Import two functions from utils to please R CMD check * vignettes/DratForPackageAuthors.Rmd (drat): Use canonical CRAN URL to please R CMD check even more 2015-07-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Author): Finally credit all contributors; (Version): Roll minor version (Date): Update Date 2015-07-29 Matt Jones gitcode@magisa.org * R/insertPackage.R: Better support for OS X binaries via getPathForMac() function which untars the tgz file, extracts the Built: line from the description, and determines if the build platform was \"darwin13\", in which case \"mavericks\" is included on the returned path. 2015-07-25 Thomas Leeper thosjleeper@gmail.com * R/archivePackages.R: New function to (optionally) archive existing packages when a new one gets added. * R/insertPackages.R: Support archivePackages() * R/pruneRepo.R: Support archivePackages() 2015-06-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Correct use from .Call to call. with a big Doh! and thanks to Guy Dawson for PR #25 2015-05-26 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Add a short paragraph about miniCRAN 2015-05-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.4 * README.md: Corrected one URL, added link to drat FAQ 2015-05-24 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Added new section 2015-05-23 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: In non-GH mode, explicitly check for spaces in the URL and abort if found as file-based access with spaces breaks. * R/addRepo.R: State that file-based URL has to be 'file:/some/path' * man/addRepo.Rd: Ditto 2015-05-12 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd (vignette): Small edits 2015-05-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Roll Date and Version * NAMESPACE: Also export new functions pruneRepo and initRepo * R/pruneRepo.R (pruneRepo): Added (untested so far) removal * man/pruneRepo.Rd: Initial documentation * R/initRepo.R (initRepo): (Very) initial version of a repo creator * man/initRepo.Rd: Initial documentation * R/insertPackage.R (identifyPackageType): Fix documentation typo 2015-04-28 Carl Boettiger cboettig@gmail.com * R/insertPackage.R (insertPackage): Protect git2r::commit() call with tryCatch() to gracefully deal with error conditions 2015-04-27 Dirk Eddelbuettel edd@debian.org * vignettes/DratFAQ.Rmd: Beginnings of a Drat FAQ vignette 2015-04-26 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Some tweaking 2015-04-26 Jan Schulz jasc@gmx.net * R/insertPackage.R (insertPackage): Support Windows and Mac OS X binary packages 2015-04-10 Dirk Eddelbuettel edd@debian.org * vignettes/rmd2html.r: Added to process vignettes * vignettes/*.Rmd: Correct VignetteIndexEntry * vignettes/*.html: Added html versions prior to build 2015-04-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.3 * vignettes/DratForPackageUsers.Rmd: Added new vignette detailing drat use for package users (ie someone installing from a drat) 2015-04-08 Dirk Eddelbuettel edd@debian.org * vignettes/DratForPackageAuthors.Rmd: Added new vignette detailing drat use for package authors (ie someone writing to a drat) 2015-03-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Added knitr to Suggests: and VignetteBuilder: * .travis.yml: Added knitr 2015-03-27 Dirk Eddelbuettel edd@debian.org * vignettes/WhyDrat.Rmd: Adding post by Steven as vignette * vignettes/CombiningDratAndTravis.Rmd: Adding (work-in-progress) post by Colin 2015-03-26 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Added/extended/clarified example * man/addRepo.Rd: Corresponding Rd file 2015-03-22 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R: Support setting a commit message * inst/scripts/git2targz.sh: Beginnings of helper script to create a tarball (suitable for a drat repo) given a repo URL 2015-03-16 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Use on.exit() with setwd() to ensure we return to current working directory (closes #9) 2015-03-14 Dirk Eddelbuettel edd@debian.org * R/addRepo.R: Added examples (inside \\dontrun{}) to help page * R/insertPackage.R: Idem 2015-03-12 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Add quietly=TRUE to requireNamespace 2015-03-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Correction to file operations and path settings (cf GH issue #7) 2015-03-04 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Re-enable git2r::checkout() 2015-02-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New release 0.0.2 * R/insertPackage.R: Document git2r in help page, don't use git2r for checkout yet though (cf git2r issue #109) * R/pruneRepo.R: Default path for repo also contains src/contrib/; generalize regular expression for source tarball * inst/TODO.md: Updated with recent changes 2015-02-27 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R: Use git2r if available * DESCRIPTION: Add Suggests: on git2r * DESCRIPTION (Version,Date): Bump Date: and Version: * .travis.yml: Also install git2r 2015-02-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version,Date): Bump Date: and Version: * R/insertPackage.R (insertPackage): Correct directory location for the (optional) git commands 2015-02-10 Dirk Eddelbuettel edd@debian.org * R/pruneRepo.R (.pruneRepo): Beginnings of a helper function to identify older versions of given packages in a repo directory * inst/TODO.md: Added item to generalize sources beyond .tar.gz 2015-02-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Bumping Version and Date 2015-02-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Description): Remove continuation lines which trigger a bug in devtools (cf issue tick #1) * man/drat-package.Rd (Maintainer): Correction from pull request #2 by Colin Gillespie applied * R/addRepo.R: Clarify alturl argument as per issue ticket #3 * man/addRepo.Rd: Ditto 2015-02-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Version 0.0.1 * DESCRIPTION (Description): And another editing of Description: 2015-02-02 Dirk Eddelbuettel edd@debian.org * R/addRepo.R (addRepo): Use http, not https, at GitHub * man/drat-package.Rd: Ditto 2015-02-01 Dirk Eddelbuettel edd@debian.org * R/insertPackage.R (insertPackage): Renamed from insertRelesae() * NAMESPACE: Explicitly expotr addRepo() and insertPackage() * R/addRepo.R (add): Also provide unexported alias drat:::add() * R/insertPackage.R (insert): Ditto for drat:::insert() * inst/TODO.md: Moved from top-level * tests/simpleTests.R (testInsertLocal): Expanded tests * .travis.yml (script): Added Travis CI support * .Rbuildignore: Added to exclude Travis file 2015-01-30 Dirk Eddelbuettel edd@debian.org * R/addRepo.R (addRepo): Renamed from add.R; function now addRepo() * R/insertRelease.R (insertRelease): Renamed from insert.R, function renamed too to stress that repos contains releases not commits * tests/simpleTests.R: Changed to use addRepo() 2015-01-29 Dirk Eddelbuettel edd@debian.org * R/insert.R (insert): Small enhancements / corrections 2015-01-28 Dirk Eddelbuettel edd@debian.org * R/insert.R (insert): Offer optional git add, commit push * R/add.R (add): Allow for multiple accounts added at once * tests/simpleTests.R: Added first simple test script * man/drat-package.Rd: Updated 2015-01-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Beginnings of what will become version 0.0.1 * R/add.R: Initial version * R/insert.R: Ditto * TODO.md: Added with some first notes","title":"2015"},{"location":"news/","text":"Version 0.2.5 (2024-10-21) Function insertPackage has a new optional argument OSflavour (Arne Holmin in #142 ) A test file conditions correctly about git2r being present (Dirk) Several smaller packaging updates and enhancements to continuous integration and documentation have been added (Dirk) Version 0.2.4 (2023-10-09) macOS Arm M1 repos are now also supported in pruning and archival (Joey Reid in #135 fixing #134 ) A minor vignette typo was fixed (Dirk) A small error with setwd() in insertPackage() was corrected (Dirk) macOS x86_64 repos (on big-sur) are now supported too (Arne Johannes Holmin in #139 fixing #138 ) A few small maintenance tweaks were applied to the CI setup, and to the main README.md Version 0.2.3 (2022-04-13) Arm M1 repos are now supported ( #126 and #131 fixing #125 ) A vignette typo has been fixed ( #130 ) Version 0.2.2 (2021-12-01) Travis artifacts and badges have been pruned Vignettes now use simplermarkdown Version 0.2.1 (2021-07-09) Two internal functions now have a note in their documentation stating them as not exported (Dirk in response to #123 ) Repositories created by initRepo now have an placeholder index.html to not trigger a curl check at CRAN (Dirk) Adding to a repository now checks for a top-level index.html and displays a message if missing (Dirk) The DratStepByStep.Rmd vignette mentions the added index.html file Version 0.2.0 (2021-04-21) A documentation website for the package was added at https://eddelbuettel.github.io/drat/ (Dirk) The continuous integration was switched to using \u2018r-ci\u2019 (Dirk) The docs/ directory of the main repository branch can now be used instead of gh-pages branch (Dirk in #112 ) A new repository https://github.com/drat-base/drat can now be used to fork an initial drat repository (Dirk) A new vignette \u201cDrat Step-by-Step\u201d was added (Roman Hornung and Dirk in #117 fixing #115 and #113 ) The test suite was refactored for docs/ use (Felix Ernst in #118 ) The minimum R version is now \u2018R (>= 3.6)\u2019 (Dirk fixing #119 ) The vignettes were switched to minidown (Dirk fixing #116 ) A new test file was added to ensure \u2018NEWS.Rd\u2019 is always at the current release version. Version 0.1.8 (2020-07-18) The archive pruning test code was corrected for r-oldrel (Felix Ernst in #105 fixing #104 ). Version 0.1.7 (2020-07-10) Changes in drat functionality Functions insertPackages , archivePackages and prunePackages are now vectorised (Patrick Schratz and Felix Ernst in #93 , #100 ). The new functionality is supported by unit tests (Felix Ernst in #93 , and #102 fixing #101 ). Added new function updateRepo (Felix Ernst in #95 , #97 ). Version 0.1.6 (2020-05-29) Changes in drat functionality Support for the various (current) macOS binary formats was rewritten (Felix Ernst in #89 fixing #88 ). Travis CI use was updated to R 4.0.0 and bionic (Dirk). A drat repo was added to the README (Thomas Fuller in #86 ) Version 0.1.5 (2019-03-28) Changes in drat functionality Windows paths are handled better when inserting packages (Neal Fultz in #70 ) Binary packages are now supported for the pruneRepo and archivePackages commands (Christoph Stepper in #79 ). Changes in drat documentation Properly prefix R path in system call in a tests (Dirk in minor cleanup to #70 ). Version 0.1.4 (2017-12-16) Changes in drat functionality Binaries for macOS are now split by R version into two different directories (Neal Futz in #67 addring #64 ). The target branch can now be set via a global option (Neal Futz in #68 addressing #61 ). In commit mode, add file PACKAGES.rds unconditionally. Changes in drat documentation Updated 'README.md' removing another stale example URL Version 0.1.3 (2017-09-16) Changes in drat functionality Ensure 'PACKAGES.rds', if present, is also inserted in repo Use https to fetch Travis CI script from r-travis Changes in drat documentation Updated 'README.md' removing stale example URLs ( #63 ) Version 0.1.2 (2016-10-28) Changes in drat documentation The FAQ vignette added a new question Why use drat URLs were made canonical, omegahat.net was updated from .org Several files (README.md, Description, help pages) were edited Version 0.1.1 (2016-08-07) Changes in drat functionality Use dir.exists , leading to versioned Depends on R (>= 3.2.0) Optionally pull remote before insert (Mark in PR #38 ) Fix support for dots (Jan G. in PR #40 ) Accept dots in package names (Antonio in PR #48 ) Switch to htpps URLs at GitHub (Colin in PR #50 ) Support additional fields in PACKAGE file (Jan G. in PR #54 ) Changes in drat documentation Further improvements and clarifications to vignettes Travis script switched to run.sh from our fork This NEWS file was (belatedly) added Version 0.1.0 (2015-08-08) Changes in drat functionality New function to optionally archive packages when inserting Improved OS X support Changes in drat documentation Added note about miniCRAN to FAQ vignette DESCRIPTION now credits all contributors Updated / expanded vignettes Version 0.0.4 (2015-05-26) Corrections to vignettes Added Windows and OS X support (Jan Schulz in PR #16 ) New vignette Drat FAQ started More improvement to code and behaviour Version 0.0.3 (2015-04-10) Small extensions and corrections to existing functionality New helper script git2targz.sh Improved documentation New vignette by Steven Pav on Why Drat? New vignette by Colin Gilespie on Drat and Travis New vignettes for package authors, and users Version 0.0.2 (2015-03-01) Added (optional) git2r support New pruneRepo() functionality Version 0.0.1 (2015-02-04) Initial version with insert() , add() and more","title":"News"},{"location":"man/addRepo/","text":"Add a (drat) repository to the current session Description R can use multiple archives: CRAN, BioConductor and Omegahat have been supported for years. It is equally easy to add local archives from the same machine, or local network, or university / company network as well as other publically available repositories. This function aids in the process, and defaults to adding a \u2018drat\u2019 archive at GitHub under the given account. Usage addRepo(account, alturl) add(...) Arguments account Character vector with one or more GitHub account for which a \u2018drat\u2019 archive is to be added. alturl Alternative repo specification with a complete url string. If \u2018alturl\u2019 is provided, a single \u2018account\u2019 must be provided as well. For file-based access, the URL format has to follow the file:/some/path/ format starting with \u2018file\u2019 followed by a single colon. ... For the aliases variant, a catch-all collection of parameters. Details This function retrieves the current set of repositories (see getOption(\"repos\") for the current values) and adds (or overwrites) the entry for the given \u2018account\u2019. For non-GitHub repositories an alternative URL can be specified as \u2018alturl\u2019 (and assigned to \u2018account\u2019 as well). An aliased function add is also available, but not exported via NAMESPACE to not clobber a possibly unrelated function; use it via drat:::add() . Value The altered set of repositories Author(s) Dirk Eddelbuettel Examples ## Not run: addRepo(\"drat\") # adds GitHub repo via default URL addRepo(c(\"eddelbuettel\", \"ghrr\")) # ditto but adds two repos at once addRepo(\"LocalRepo\", \"file:/nas/R/repo\") # adds local file-based repo, # assumes you can read /nas/R/repo ## End(Not run)","title":"addRepo"},{"location":"man/addRepo/#add-a-drat-repository-to-the-current-session","text":"","title":"Add a (drat) repository to the current session"},{"location":"man/addRepo/#description","text":"R can use multiple archives: CRAN, BioConductor and Omegahat have been supported for years. It is equally easy to add local archives from the same machine, or local network, or university / company network as well as other publically available repositories. This function aids in the process, and defaults to adding a \u2018drat\u2019 archive at GitHub under the given account.","title":"Description"},{"location":"man/addRepo/#usage","text":"addRepo(account, alturl) add(...)","title":"Usage"},{"location":"man/addRepo/#arguments","text":"account Character vector with one or more GitHub account for which a \u2018drat\u2019 archive is to be added. alturl Alternative repo specification with a complete url string. If \u2018alturl\u2019 is provided, a single \u2018account\u2019 must be provided as well. For file-based access, the URL format has to follow the file:/some/path/ format starting with \u2018file\u2019 followed by a single colon. ... For the aliases variant, a catch-all collection of parameters.","title":"Arguments"},{"location":"man/addRepo/#details","text":"This function retrieves the current set of repositories (see getOption(\"repos\") for the current values) and adds (or overwrites) the entry for the given \u2018account\u2019. For non-GitHub repositories an alternative URL can be specified as \u2018alturl\u2019 (and assigned to \u2018account\u2019 as well). An aliased function add is also available, but not exported via NAMESPACE to not clobber a possibly unrelated function; use it via drat:::add() .","title":"Details"},{"location":"man/addRepo/#value","text":"The altered set of repositories","title":"Value"},{"location":"man/addRepo/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/addRepo/#examples","text":"## Not run: addRepo(\"drat\") # adds GitHub repo via default URL addRepo(c(\"eddelbuettel\", \"ghrr\")) # ditto but adds two repos at once addRepo(\"LocalRepo\", \"file:/nas/R/repo\") # adds local file-based repo, # assumes you can read /nas/R/repo ## End(Not run)","title":"Examples"},{"location":"man/archivePackages/","text":"Move older copies of packages to an archive Description The function moves older versions of packages into a CRAN-style archive folder. Usage archivePackages( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion() ) archivePackagesForAllRversions( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg ) Arguments repopath Character variable with the path to the repo; defaults to the value of the \u201cdratRepo\u201d option with \u201c\"~/git/drat\"\u201d as fallback type Character variable for the type of repository, so far \u201csource\u201d, \u201cbinary\u201d, \u201cwin.binary\u201d, \u201cmac.binary\u201d, \u201cmac.binary.big-sur-x86_64\u201d, \u201cmac.binary.big-sur-arm64\u201d, \u201cmac.binary.mavericks\u201d, \u201cmac.binary.el-capitan\u201d or \u201cboth\u201d pkg Optional character variable specifying a package name(s), whose older versions should be archived. If missing (the default), archiving is performed on all packages. version R version information in the format X.Y or X.Y.Z . Only used, if archiving binary packages. (default: version = getRversion() ). If version = NA , all available R versions will be used. If version = NULL , this defaults to getRversion() . Details This function is still undergoing development and polish and may change in subsequent versions. Author(s) Thomas J. Leeper Examples ## Not run: archivePackages() # archive all older package versions archivePackages(pkg = \"drat\") # archive older copies of just one package ## End(Not run)","title":"archivePackages"},{"location":"man/archivePackages/#move-older-copies-of-packages-to-an-archive","text":"","title":"Move older copies of packages to an archive"},{"location":"man/archivePackages/#description","text":"The function moves older versions of packages into a CRAN-style archive folder.","title":"Description"},{"location":"man/archivePackages/#usage","text":"archivePackages( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion() ) archivePackagesForAllRversions( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg )","title":"Usage"},{"location":"man/archivePackages/#arguments","text":"repopath Character variable with the path to the repo; defaults to the value of the \u201cdratRepo\u201d option with \u201c\"~/git/drat\"\u201d as fallback type Character variable for the type of repository, so far \u201csource\u201d, \u201cbinary\u201d, \u201cwin.binary\u201d, \u201cmac.binary\u201d, \u201cmac.binary.big-sur-x86_64\u201d, \u201cmac.binary.big-sur-arm64\u201d, \u201cmac.binary.mavericks\u201d, \u201cmac.binary.el-capitan\u201d or \u201cboth\u201d pkg Optional character variable specifying a package name(s), whose older versions should be archived. If missing (the default), archiving is performed on all packages. version R version information in the format X.Y or X.Y.Z . Only used, if archiving binary packages. (default: version = getRversion() ). If version = NA , all available R versions will be used. If version = NULL , this defaults to getRversion() .","title":"Arguments"},{"location":"man/archivePackages/#details","text":"This function is still undergoing development and polish and may change in subsequent versions.","title":"Details"},{"location":"man/archivePackages/#authors","text":"Thomas J. Leeper","title":"Author(s)"},{"location":"man/archivePackages/#examples","text":"## Not run: archivePackages() # archive all older package versions archivePackages(pkg = \"drat\") # archive older copies of just one package ## End(Not run)","title":"Examples"},{"location":"man/drat-package/","text":"Easy-to-use package repository creation and access Description The drat package permits user to create and use ad-hoc package repositories. It takes advantage of GitHub accounts and \u2018gh-pages\u2019 branches which automatically become web-accessible and can be used to provide a repository. Alternatively, custom repository paths and addresses can be used. Details Given a user account on GitHub, say, \u2018eddelbuettel\u2019, and a repository \u2018drat\u2019, we can infer an top-level repostory URL as such as https://eddelbuettel.github.io/drat/ by supplying only the username (as the rest is inferred by defaults). This allows us to create easily useable, identifiable and shareable per-user repositories\u2014without the user having to create and administer a webserver anywhere. Two higher level functions then allow both insertion of (source or binary) packages, as well as addition of a given drat repository to an R session so that package in the repository can be accesses. Author(s) Dirk Eddelbuettel Maintainer: Dirk Eddelbuettel \\<edd@debian.org> References The R Installation and Administration manual has more and details about repository creation See Also update.packages , available.packages , install.packages Examples ## Not run: drat::addRepo(\"eddelbuettel\") # adds the repo of GitHub user 'eddelbuettel' ## End(Not run)","title":"Drat package"},{"location":"man/drat-package/#easy-to-use-package-repository-creation-and-access","text":"","title":"Easy-to-use package repository creation and access"},{"location":"man/drat-package/#description","text":"The drat package permits user to create and use ad-hoc package repositories. It takes advantage of GitHub accounts and \u2018gh-pages\u2019 branches which automatically become web-accessible and can be used to provide a repository. Alternatively, custom repository paths and addresses can be used.","title":"Description"},{"location":"man/drat-package/#details","text":"Given a user account on GitHub, say, \u2018eddelbuettel\u2019, and a repository \u2018drat\u2019, we can infer an top-level repostory URL as such as https://eddelbuettel.github.io/drat/ by supplying only the username (as the rest is inferred by defaults). This allows us to create easily useable, identifiable and shareable per-user repositories\u2014without the user having to create and administer a webserver anywhere. Two higher level functions then allow both insertion of (source or binary) packages, as well as addition of a given drat repository to an R session so that package in the repository can be accesses.","title":"Details"},{"location":"man/drat-package/#authors","text":"Dirk Eddelbuettel Maintainer: Dirk Eddelbuettel \\<edd@debian.org>","title":"Author(s)"},{"location":"man/drat-package/#references","text":"The R Installation and Administration manual has more and details about repository creation","title":"References"},{"location":"man/drat-package/#see-also","text":"update.packages , available.packages , install.packages","title":"See Also"},{"location":"man/drat-package/#examples","text":"## Not run: drat::addRepo(\"eddelbuettel\") # adds the repo of GitHub user 'eddelbuettel' ## End(Not run)","title":"Examples"},{"location":"man/getPackageInfo/","text":"Get information from a binary package Description This function returns the compile-time information added to the DESCRIPTION file in the package. Usage getPackageInfo(file) Arguments file the fully qualified path of the package Value A named vector with several components Note This is an internal function, use ::: to access it from outside the internal package code. Author(s) Dirk Eddelbuettel","title":"getPackageInfo"},{"location":"man/getPackageInfo/#get-information-from-a-binary-package","text":"","title":"Get information from a binary package"},{"location":"man/getPackageInfo/#description","text":"This function returns the compile-time information added to the DESCRIPTION file in the package.","title":"Description"},{"location":"man/getPackageInfo/#usage","text":"getPackageInfo(file)","title":"Usage"},{"location":"man/getPackageInfo/#arguments","text":"file the fully qualified path of the package","title":"Arguments"},{"location":"man/getPackageInfo/#value","text":"A named vector with several components","title":"Value"},{"location":"man/getPackageInfo/#note","text":"This is an internal function, use ::: to access it from outside the internal package code.","title":"Note"},{"location":"man/getPackageInfo/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/identifyPackageType/","text":"Identifies the package type from a filename Description This function identifies the package type from a filename. Usage identifyPackageType(file, pkginfo = getPackageInfo(file)) Arguments file An R package in source or binary format, pkginfo information on the R package referenced by file Details The returned string is suitable for write_PACKAGES() . Value string Type of the supplied package. Note This is an internal function, use ::: to access it from outside the internal package code. Author(s) Jan Schulz and Dirk Eddelbuettel","title":"identifyPackageType"},{"location":"man/identifyPackageType/#identifies-the-package-type-from-a-filename","text":"","title":"Identifies the package type from a filename"},{"location":"man/identifyPackageType/#description","text":"This function identifies the package type from a filename.","title":"Description"},{"location":"man/identifyPackageType/#usage","text":"identifyPackageType(file, pkginfo = getPackageInfo(file))","title":"Usage"},{"location":"man/identifyPackageType/#arguments","text":"file An R package in source or binary format, pkginfo information on the R package referenced by file","title":"Arguments"},{"location":"man/identifyPackageType/#details","text":"The returned string is suitable for write_PACKAGES() .","title":"Details"},{"location":"man/identifyPackageType/#value","text":"string Type of the supplied package.","title":"Value"},{"location":"man/identifyPackageType/#note","text":"This is an internal function, use ::: to access it from outside the internal package code.","title":"Note"},{"location":"man/identifyPackageType/#authors","text":"Jan Schulz and Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/initRepo/","text":"Intialize a git repo for drat Description This helper function creates a new repository, creates and checks out the default GitHub Pages location (either the \u2018gh-pages\u2019 branch or directory \u2018docs\u2019) and fills it with the required new paths. Usage initRepo( name = \"drat\", basepath = getOption(\"dratDirectory\", \"~/git\"), location = getOption(\"dratBranch\", \"gh-pages\") ) Arguments name A character variable with the name the new repository, the default is \u201cdrat\u201d. basepath A character variable with path to the directory in which the new repository is to be created. The default value is \u201c~/git\u201d and can be overriden via option \u2018dratDirectory\u2019. location A character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option. Details Currently only \u2018src/contrib\u2019 for source repositories is supported by this function. The insertPackage() function knows to deal with binaries for different architectures. The function also installs a top-level index.html file to ensure external tests against the repository (as for example done by CRAN if you list the repository as an \u2018Additional_repositories\u2019 in a package) do not return a \u2018404\u2019 error. Value The function is invoked for its side-effects and only returns NULL invisibly. Author(s) Dirk Eddelbuettel","title":"initRepo"},{"location":"man/initRepo/#intialize-a-git-repo-for-drat","text":"","title":"Intialize a git repo for drat"},{"location":"man/initRepo/#description","text":"This helper function creates a new repository, creates and checks out the default GitHub Pages location (either the \u2018gh-pages\u2019 branch or directory \u2018docs\u2019) and fills it with the required new paths.","title":"Description"},{"location":"man/initRepo/#usage","text":"initRepo( name = \"drat\", basepath = getOption(\"dratDirectory\", \"~/git\"), location = getOption(\"dratBranch\", \"gh-pages\") )","title":"Usage"},{"location":"man/initRepo/#arguments","text":"name A character variable with the name the new repository, the default is \u201cdrat\u201d. basepath A character variable with path to the directory in which the new repository is to be created. The default value is \u201c~/git\u201d and can be overriden via option \u2018dratDirectory\u2019. location A character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option.","title":"Arguments"},{"location":"man/initRepo/#details","text":"Currently only \u2018src/contrib\u2019 for source repositories is supported by this function. The insertPackage() function knows to deal with binaries for different architectures. The function also installs a top-level index.html file to ensure external tests against the repository (as for example done by CRAN if you list the repository as an \u2018Additional_repositories\u2019 in a package) do not return a \u2018404\u2019 error.","title":"Details"},{"location":"man/initRepo/#value","text":"The function is invoked for its side-effects and only returns NULL invisibly.","title":"Value"},{"location":"man/initRepo/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/insertPackage/","text":"Insert a package source or binary file into a drat repository Description R can use multiple archives: CRAN, BioConductor and Omegahat have been supported for years. It is equally easy to add local archives from the same machine, or local network, or university / company network as well as other publically available repositories. This function aids in the process, and defaults to inserting a given source archive into a given repository. Usage insertPackage( file, repodir = getOption(\"dratRepo\", \"~/git/drat\"), commit = FALSE, pullfirst = FALSE, action = c(\"none\", \"archive\", \"prune\"), location = getOption(\"dratBranch\", \"gh-pages\"), ... ) insertPackages(file, ...) insert(...) Arguments file One or more R package(s) in source or binary format repodir A local directory corresponding to the repository top-level directory. commit Either boolean toggle to select automatic git operations \u2018add\u2019, \u2018commit\u2019, and \u2018push\u2019 or, alternatively, a character variable can be used to specify a commit message; this also implies the \u2018TRUE\u2019 values in other contexts. pullfirst Boolean toggle to call git pull before inserting the package. action A character string containing one of: \u201cnone\u201d (the default; add the new package into the repo, effectively masking previous versions), \u201carchive\u201d (place any previous versions into a package-specific archive folder, creating such an archive if it does not already exist), or \u201cprune\u201d (calling pruneRepo ). location A character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option. ... For insert the aliases variant, a catch-all collection of parameters. For insertPackage arguments passed to write_PACKAGES currently include latestOnly , for which the default value is set here to FALSE . See write_PACKAGES . Details This function inserts the given (source or binary) package file into the given (local) package repository and updates the index. By setting the commit option to TRUE , one can then push to a remote git code repository. If the git2r package is installed, it is used for the interaction with the git repository; otherwise the git shell command is used. An aliased function insert is also available, but not exported via NAMESPACE to not clobber a possibly unrelated function; use it via drat:::insert() . The function also checks for a top-level index.html file to ensure external tests against the repository (as for example done by CRAN if you list the repository as an \u2018Additional_repositories\u2019 in a package) do not return a \u2018404\u2019 error. If missing, a simple one-line example is shown. Value NULL is returned. Options Set using options dratRepo Path to git repo. Defaults to ~/git/drat dratBranch The git branch to store packages on. Defaults to gh-pages Author(s) Dirk Eddelbuettel Examples ## Not run: insertPackage(\"foo_0.2.3.tar.gz\") # inserts into (default) repo insertPackage(\"foo_0.2.3.tar.gz\", \"/nas/R/\") # ... into local dir ## End(Not run) ## Not run: insertPackage(\"foo_0.2.3.tar.gz\", action = \"prune\") # prunes any older copies insertPackage(\"foo_0.2.3.tar.gz\", action = \"archive\") # archives any older copies ## End(Not run)","title":"insertPackage"},{"location":"man/insertPackage/#insert-a-package-source-or-binary-file-into-a-drat-repository","text":"","title":"Insert a package source or binary file into a drat repository"},{"location":"man/insertPackage/#description","text":"R can use multiple archives: CRAN, BioConductor and Omegahat have been supported for years. It is equally easy to add local archives from the same machine, or local network, or university / company network as well as other publically available repositories. This function aids in the process, and defaults to inserting a given source archive into a given repository.","title":"Description"},{"location":"man/insertPackage/#usage","text":"insertPackage( file, repodir = getOption(\"dratRepo\", \"~/git/drat\"), commit = FALSE, pullfirst = FALSE, action = c(\"none\", \"archive\", \"prune\"), location = getOption(\"dratBranch\", \"gh-pages\"), ... ) insertPackages(file, ...) insert(...)","title":"Usage"},{"location":"man/insertPackage/#arguments","text":"file One or more R package(s) in source or binary format repodir A local directory corresponding to the repository top-level directory. commit Either boolean toggle to select automatic git operations \u2018add\u2019, \u2018commit\u2019, and \u2018push\u2019 or, alternatively, a character variable can be used to specify a commit message; this also implies the \u2018TRUE\u2019 values in other contexts. pullfirst Boolean toggle to call git pull before inserting the package. action A character string containing one of: \u201cnone\u201d (the default; add the new package into the repo, effectively masking previous versions), \u201carchive\u201d (place any previous versions into a package-specific archive folder, creating such an archive if it does not already exist), or \u201cprune\u201d (calling pruneRepo ). location A character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option. ... For insert the aliases variant, a catch-all collection of parameters. For insertPackage arguments passed to write_PACKAGES currently include latestOnly , for which the default value is set here to FALSE . See write_PACKAGES .","title":"Arguments"},{"location":"man/insertPackage/#details","text":"This function inserts the given (source or binary) package file into the given (local) package repository and updates the index. By setting the commit option to TRUE , one can then push to a remote git code repository. If the git2r package is installed, it is used for the interaction with the git repository; otherwise the git shell command is used. An aliased function insert is also available, but not exported via NAMESPACE to not clobber a possibly unrelated function; use it via drat:::insert() . The function also checks for a top-level index.html file to ensure external tests against the repository (as for example done by CRAN if you list the repository as an \u2018Additional_repositories\u2019 in a package) do not return a \u2018404\u2019 error. If missing, a simple one-line example is shown.","title":"Details"},{"location":"man/insertPackage/#value","text":"NULL is returned.","title":"Value"},{"location":"man/insertPackage/#options","text":"Set using options dratRepo Path to git repo. Defaults to ~/git/drat dratBranch The git branch to store packages on. Defaults to gh-pages","title":"Options"},{"location":"man/insertPackage/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/insertPackage/#examples","text":"## Not run: insertPackage(\"foo_0.2.3.tar.gz\") # inserts into (default) repo insertPackage(\"foo_0.2.3.tar.gz\", \"/nas/R/\") # ... into local dir ## End(Not run) ## Not run: insertPackage(\"foo_0.2.3.tar.gz\", action = \"prune\") # prunes any older copies insertPackage(\"foo_0.2.3.tar.gz\", action = \"archive\") # archives any older copies ## End(Not run)","title":"Examples"},{"location":"man/pruneRepo/","text":"Prune repository from older copies of packages Description The function determines which packages in a repositories can be removed as they are being \u2018shadowed\u2019 by a newer version of the same packages. Usage getRepoInfo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion(), location = getOption(\"dratBranch\", \"gh-pages\") ) pruneRepo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion(), remove = FALSE, location = getOption(\"dratBranch\", \"gh-pages\") ) pruneRepoForAllRversions( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, remove = FALSE ) updateRepo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), version = NA, ... ) Arguments repopath Character variable with the path to the repo; defaults to the value of the \u201cdratRepo\u201d option with \u201c\"~/git/drat\"\u201d as fallback type Character variable for the type of repository, so far \u201csource\u201d, \u201cbinary\u201d, \u201cwin.binary\u201d, \u201cmac.binary\u201d, \u201cmac.binary.mavericks\u201d, \u201cmac.binary.el-capitan\u201d, \u201cmac.binary.big-sur-x86_64\u201d, \u201cmac.binary.big-sur-arm64\u201d, or \u201cboth\u201d pkg Optional character variable specifying a package name, whose older versions should be pruned. If missing (the default), pruning is performed on all packages. version R version information in the format X.Y or X.Y.Z . Only used, if pruning binary packages. (default: version = getRversion() ). If version = NA , all available R versions will be used. If version = NULL , this defaults to getRversion() . location An optional character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option. remove Character or logical variable indicating whether files should be removed. Nothing happens if \u2018FALSE\u2019. If different from (logical) \u2018FALSE\u2019 and equal to character \u201cgit\u201d files are removed via git rm else via a straight file deletion. ... For updateRepo a catch-all collection of parameters. Arguments passed to update_PACKAGES currently include latestOnly , for which the default value is set here to FALSE . See update_PACKAGES . Please note that this has an effect for update_PACKAGES only, if new packages are found, e.g. manually added. Details Given a package name, R will always find the newest version of that package. Older versions are therefore effectively shadowed and can be removed without functionally changing a repository. However, if a current package file is removed without pruneRepo , the PACKAGES, PACKAGES.gz and PACKAGES.rds file might be not up to date. To ensure the correct information is available in these indices, run updateRepo . These functions are still undergoing development and polish and may change in subsequent versions. Value A data frame describing the repository is returned containing columns with columns \u201cfile\u201d, \u201cpackage\u201d (just the name), \u201cversion\u201d and a logical variable \u201cnewest\u201d indicating if the package can be removed. Author(s) Dirk Eddelbuettel","title":"pruneRepo"},{"location":"man/pruneRepo/#prune-repository-from-older-copies-of-packages","text":"","title":"Prune repository from older copies of packages"},{"location":"man/pruneRepo/#description","text":"The function determines which packages in a repositories can be removed as they are being \u2018shadowed\u2019 by a newer version of the same packages.","title":"Description"},{"location":"man/pruneRepo/#usage","text":"getRepoInfo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion(), location = getOption(\"dratBranch\", \"gh-pages\") ) pruneRepo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"binary\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, version = getRversion(), remove = FALSE, location = getOption(\"dratBranch\", \"gh-pages\") ) pruneRepoForAllRversions( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), pkg, remove = FALSE ) updateRepo( repopath = getOption(\"dratRepo\", \"~/git/drat\"), type = c(\"source\", \"mac.binary\", \"mac.binary.big-sur-x86_64\", \"mac.binary.big-sur-arm64\", \"mac.binary.el-capitan\", \"mac.binary.mavericks\", \"win.binary\", \"both\"), version = NA, ... )","title":"Usage"},{"location":"man/pruneRepo/#arguments","text":"repopath Character variable with the path to the repo; defaults to the value of the \u201cdratRepo\u201d option with \u201c\"~/git/drat\"\u201d as fallback type Character variable for the type of repository, so far \u201csource\u201d, \u201cbinary\u201d, \u201cwin.binary\u201d, \u201cmac.binary\u201d, \u201cmac.binary.mavericks\u201d, \u201cmac.binary.el-capitan\u201d, \u201cmac.binary.big-sur-x86_64\u201d, \u201cmac.binary.big-sur-arm64\u201d, or \u201cboth\u201d pkg Optional character variable specifying a package name, whose older versions should be pruned. If missing (the default), pruning is performed on all packages. version R version information in the format X.Y or X.Y.Z . Only used, if pruning binary packages. (default: version = getRversion() ). If version = NA , all available R versions will be used. If version = NULL , this defaults to getRversion() . location An optional character variable with the GitHub Pages location: either \u201cgh-pages\u201d indicating a branch of that name, or \u201cdocs/\u201d directory in the main branch. The default value can be overridden via the \u201cdratBranch\u201d option. remove Character or logical variable indicating whether files should be removed. Nothing happens if \u2018FALSE\u2019. If different from (logical) \u2018FALSE\u2019 and equal to character \u201cgit\u201d files are removed via git rm else via a straight file deletion. ... For updateRepo a catch-all collection of parameters. Arguments passed to update_PACKAGES currently include latestOnly , for which the default value is set here to FALSE . See update_PACKAGES . Please note that this has an effect for update_PACKAGES only, if new packages are found, e.g. manually added.","title":"Arguments"},{"location":"man/pruneRepo/#details","text":"Given a package name, R will always find the newest version of that package. Older versions are therefore effectively shadowed and can be removed without functionally changing a repository. However, if a current package file is removed without pruneRepo , the PACKAGES, PACKAGES.gz and PACKAGES.rds file might be not up to date. To ensure the correct information is available in these indices, run updateRepo . These functions are still undergoing development and polish and may change in subsequent versions.","title":"Details"},{"location":"man/pruneRepo/#value","text":"A data frame describing the repository is returned containing columns with columns \u201cfile\u201d, \u201cpackage\u201d (just the name), \u201cversion\u201d and a logical variable \u201cnewest\u201d indicating if the package can be removed.","title":"Value"},{"location":"man/pruneRepo/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"vignettes/combiningdratandtravis/","text":"Combining Drat and Travis CI Colin Gillespie and Dirk Eddelbuettel 2015-04-14 What is Travis CI? Travis CI is a hosted continuous integration service. It is integrated with GitHub and offers first class support for a number of languages, but importantly for us, R. Travis CI enables package authors to continually ensure their package always build and passes associated unit tests. Whenever a commit is pushed to a git repository that contains an R package, Travis CI attempts to build the associated R package (see r-travis for R specific examples). This ensures the repository always contains a working package. This vignette describes a modification to the standard Travis CI workflow. If a package build is successful, the package is then pushed to a drat repository. Preliminaries Unsurprisingly in order to integrate Travis CI with drat, you must first to have a drat repository and secondly add Travis CI support to that repository. Workflow To allow Travis CI to push to your GitHub repository, we need to generate a GitHub API token . After re-entering your password, just select repo , or if your repository is public, select public_repo . GitHub will create the token and give you a chance to copy it down. Travis CI will then encrypt this token. The short story is: # Install Ruby first. This may require sudo gem install travis If sudo is not available, you can do a local install # Look at ~/.gem/ gem install --user-install travis cd to the R package directory and run travis encrypt GH_TOKEN=$MY_ACCESS_TOKEN --add env.global where $MY_ACCESS_TOKEN is your access token. The --add env.global automatically adds the token to your .travis.yml file. 1. Add the deploy.sh shell script to your repository and edit appropriately. An example is found at the end of this vignette and also in the dratTravis repository. Add the lines after_success: - test $TRAVIS_PULL_REQUEST == \"false\" && test $TRAVIS_BRANCH == \"master\" && bash deploy.sh to your `.travis.yml` file. This means your `drat` repository is only updated - for successful builds; - only on the master branch; - and not for pull requests. Example deploy.sh script #!/bin/bash set -o errexit -o nounset addToDrat(){ PKG_REPO=$PWD cd ..; mkdir drat; cd drat ## Set up Repo parameters git init git config user.name \"XXX YYY\" git config user.email \"XXXX@example.com\" git config --global push.default simple ## Get drat repo git remote add upstream \"https://$GH_TOKEN@github.com/GITHUB_USERNAME/drat.git\" git fetch upstream 2>err.txt git checkout gh-pages Rscript -e \"drat::insertPackage('$PKG_REPO/$PKG_TARBALL', \\ repodir = '.', \\ commit='Travis update: build $TRAVIS_BUILD_NUMBER')\" git push 2> /tmp/err.txt } addToDrat If you use a docs/ directory in the main branch, omit git checkout gh-pages and use cd docs instead.","title":"Combining Drat And Travis"},{"location":"vignettes/combiningdratandtravis/#combining-drat-and-travis-ci","text":"Colin Gillespie and Dirk Eddelbuettel 2015-04-14","title":"Combining Drat and Travis CI"},{"location":"vignettes/combiningdratandtravis/#what-is-travis-ci","text":"Travis CI is a hosted continuous integration service. It is integrated with GitHub and offers first class support for a number of languages, but importantly for us, R. Travis CI enables package authors to continually ensure their package always build and passes associated unit tests. Whenever a commit is pushed to a git repository that contains an R package, Travis CI attempts to build the associated R package (see r-travis for R specific examples). This ensures the repository always contains a working package. This vignette describes a modification to the standard Travis CI workflow. If a package build is successful, the package is then pushed to a drat repository.","title":"What is Travis CI?"},{"location":"vignettes/combiningdratandtravis/#preliminaries","text":"Unsurprisingly in order to integrate Travis CI with drat, you must first to have a drat repository and secondly add Travis CI support to that repository.","title":"Preliminaries"},{"location":"vignettes/combiningdratandtravis/#workflow","text":"To allow Travis CI to push to your GitHub repository, we need to generate a GitHub API token . After re-entering your password, just select repo , or if your repository is public, select public_repo . GitHub will create the token and give you a chance to copy it down. Travis CI will then encrypt this token. The short story is: # Install Ruby first. This may require sudo gem install travis If sudo is not available, you can do a local install # Look at ~/.gem/ gem install --user-install travis cd to the R package directory and run travis encrypt GH_TOKEN=$MY_ACCESS_TOKEN --add env.global where $MY_ACCESS_TOKEN is your access token. The --add env.global automatically adds the token to your .travis.yml file. 1. Add the deploy.sh shell script to your repository and edit appropriately. An example is found at the end of this vignette and also in the dratTravis repository. Add the lines after_success: - test $TRAVIS_PULL_REQUEST == \"false\" && test $TRAVIS_BRANCH == \"master\" && bash deploy.sh to your `.travis.yml` file. This means your `drat` repository is only updated - for successful builds; - only on the master branch; - and not for pull requests.","title":"Workflow"},{"location":"vignettes/combiningdratandtravis/#example-deploysh-script","text":"#!/bin/bash set -o errexit -o nounset addToDrat(){ PKG_REPO=$PWD cd ..; mkdir drat; cd drat ## Set up Repo parameters git init git config user.name \"XXX YYY\" git config user.email \"XXXX@example.com\" git config --global push.default simple ## Get drat repo git remote add upstream \"https://$GH_TOKEN@github.com/GITHUB_USERNAME/drat.git\" git fetch upstream 2>err.txt git checkout gh-pages Rscript -e \"drat::insertPackage('$PKG_REPO/$PKG_TARBALL', \\ repodir = '.', \\ commit='Travis update: build $TRAVIS_BUILD_NUMBER')\" git push 2> /tmp/err.txt } addToDrat If you use a docs/ directory in the main branch, omit git checkout gh-pages and use cd docs instead.","title":"Example deploy.sh script"},{"location":"vignettes/dratfaq/","text":"Drat Frequently Asked Questions Dirk Eddelbuettel 2016-10-27 What is drat? Good question. Drat is an R package which makes it really easy to provide R packages via a repository , and also makes it easy to use such repositories for package installation and upgrades. Why use drat? The motivation for drat is to give package authors more control over how they make their packages available to users. It does this by enabling package authors to make releases on a GitHub repository (or any server, more on this below). drat allows anyone to create their own package repository -- just like CRAN . There are two key advantages of using drat over other methods of installing packages from GitHub. First is that a package installed from a drat repository will be supported by install.packages() and update.packages() , so the user has easy methods for keeping up-to-date. A second advantage of using drat is that the package author can control what other people get when they download your package from GitHub. With other methods, users typically download a random install snapshot, which might have unexpected consequences for them. Where is drat? drat itself is a package, so it has source code (on GitHub) and a package (on the main R repository network). But wait: we also call the repositories created or used via drat \"drat\" repositories. So we have to distinguish between \"drat the package\" and \"a drat repository\" created or used by it. Hope this clarified things a little. Drat really can be different things which reside in different places but it aims to be a helper package which helps creating and using R package repositories easier . What other documentation is there? Glad you asked. We have written a package webpage giving a first instroduction several blog posts on the package and its releases the GitHub page README several vignettes accessible from the package page and other places. the drat repo page Why the focus on GitHub? Several answers: Because it is there and used by ever increasing numbers of package authors. Because it is pretty fast and reliable, no matter where in the world you are. Because it already gives every repository owner a web-server via either a gh-pages branch or a docs/ directory. Because all we need is a web-server and some file system space Because the single variable user uniquely identifies a URL user.github.io/drat/ , and communicating a single variable is easier than communicating a full URL Taken together, we have this a pretty good to default on GitHub for repositories. But read on ... What if not GitHub? Fear not, as drat also supports repositories on a local drive, or shared network drive, or actually just about anything where you can write to or read from. We detail that in the corresponding vignettes. Why could install_github be wrong? install_github() is a fine tool and does what it sets out to do: grab a snapshot from GitHub and install it. This can be the HEAD (by default), or a tag, or a commit, or from a branch. But we think that is not what R needs. R has become so very successful for many reasons, but (in the eyes of many) one key part of the success was repositories ensuring both easy installation and easy upgrades . That second point is lost on install_github() : it installs what we may call \"orphans\". Packages that are disconnected from an upgrade path. (With the exception, of course, of a newer version of what you install appearing in a known repository so that update.packages will see it.) We think that is a disservice to the users, and a repository can do better in a fundamental way than provide access to (somewhat random) commits. Of course, one could write new code building on top of install_github() and adding the functionality. But then, why? R already has this functionality, and had it for decades: using repositories. So drat does not aim to replace install_github() ; it simply aims at something both different and possibly much simpler. Moreover, drat puts the \"release\" option back into the hand of the package authors . By cutting a release tarball and placing it into a repository, we think a possibly more informed release snapshot is distributed than by pointing at any branch of repository. And last but not least, drat (>= 0.0.4) and its repositories also support binary installations. Can drat work with binaries? You bet. Jan Schulz provided a careful pull request to provide initial support upon which we have built. As of release 0.1.0, this should just work for both Windows and OS X. Can drat act as an Additional_repositories ? Glad you asked! In fact, you can use this GitHub query to find several dozen of packages using Additional_repositories to point to drat repos (still having drat in their name; others may use domain nane such that the search may miss them). One example we used to point to here changed however. So for a more stable use case, one example from my packages: the RcppRedis package points via this line to the ghrr drat to (optionally) use the RcppMsgPack package (which is not on CRAN as it uses a MsgPack release newer than what it in Debian). What about the miniCRAN package? The miniCRAN package creates self-sufficient repositories by examining the dependency graph and downloading all dependent packages. As such, it is more of complement to drat than an alternative --- and Word is that several people have in fact combined both. Is there a suggested commit message convention? The small helper script getCommitMessageForDrat.sh implements a simple format I have suggested in the past and used: edd@max:~/git/drat(master)$ inst/scripts/getCommitMessageForDrat.sh drat 0.1.0 94248ed git@github.com:eddelbuettel/drat.git edd@max:~/git/drat(master)$ It combined four elements: the package name the current version the current git repository commit hash marker the repository URL. When both source and binary packages are uploaded, I often add (src) or (win) to indicate the type of package committed. This format has worked and could form the basis of a standard, but suggestions and refinements are certainly welcome.","title":"Drat FAQ"},{"location":"vignettes/dratfaq/#drat-frequently-asked-questions","text":"Dirk Eddelbuettel 2016-10-27","title":"Drat Frequently Asked Questions"},{"location":"vignettes/dratfaq/#what-is-drat","text":"Good question. Drat is an R package which makes it really easy to provide R packages via a repository , and also makes it easy to use such repositories for package installation and upgrades.","title":"What is drat?"},{"location":"vignettes/dratfaq/#why-use-drat","text":"The motivation for drat is to give package authors more control over how they make their packages available to users. It does this by enabling package authors to make releases on a GitHub repository (or any server, more on this below). drat allows anyone to create their own package repository -- just like CRAN . There are two key advantages of using drat over other methods of installing packages from GitHub. First is that a package installed from a drat repository will be supported by install.packages() and update.packages() , so the user has easy methods for keeping up-to-date. A second advantage of using drat is that the package author can control what other people get when they download your package from GitHub. With other methods, users typically download a random install snapshot, which might have unexpected consequences for them.","title":"Why use drat?"},{"location":"vignettes/dratfaq/#where-is-drat","text":"drat itself is a package, so it has source code (on GitHub) and a package (on the main R repository network). But wait: we also call the repositories created or used via drat \"drat\" repositories. So we have to distinguish between \"drat the package\" and \"a drat repository\" created or used by it. Hope this clarified things a little. Drat really can be different things which reside in different places but it aims to be a helper package which helps creating and using R package repositories easier .","title":"Where is drat?"},{"location":"vignettes/dratfaq/#what-other-documentation-is-there","text":"Glad you asked. We have written a package webpage giving a first instroduction several blog posts on the package and its releases the GitHub page README several vignettes accessible from the package page and other places. the drat repo page","title":"What other documentation is there?"},{"location":"vignettes/dratfaq/#why-the-focus-on-github","text":"Several answers: Because it is there and used by ever increasing numbers of package authors. Because it is pretty fast and reliable, no matter where in the world you are. Because it already gives every repository owner a web-server via either a gh-pages branch or a docs/ directory. Because all we need is a web-server and some file system space Because the single variable user uniquely identifies a URL user.github.io/drat/ , and communicating a single variable is easier than communicating a full URL Taken together, we have this a pretty good to default on GitHub for repositories. But read on ...","title":"Why the focus on GitHub?"},{"location":"vignettes/dratfaq/#what-if-not-github","text":"Fear not, as drat also supports repositories on a local drive, or shared network drive, or actually just about anything where you can write to or read from. We detail that in the corresponding vignettes.","title":"What if not GitHub?"},{"location":"vignettes/dratfaq/#why-could-install_github-be-wrong","text":"install_github() is a fine tool and does what it sets out to do: grab a snapshot from GitHub and install it. This can be the HEAD (by default), or a tag, or a commit, or from a branch. But we think that is not what R needs. R has become so very successful for many reasons, but (in the eyes of many) one key part of the success was repositories ensuring both easy installation and easy upgrades . That second point is lost on install_github() : it installs what we may call \"orphans\". Packages that are disconnected from an upgrade path. (With the exception, of course, of a newer version of what you install appearing in a known repository so that update.packages will see it.) We think that is a disservice to the users, and a repository can do better in a fundamental way than provide access to (somewhat random) commits. Of course, one could write new code building on top of install_github() and adding the functionality. But then, why? R already has this functionality, and had it for decades: using repositories. So drat does not aim to replace install_github() ; it simply aims at something both different and possibly much simpler. Moreover, drat puts the \"release\" option back into the hand of the package authors . By cutting a release tarball and placing it into a repository, we think a possibly more informed release snapshot is distributed than by pointing at any branch of repository. And last but not least, drat (>= 0.0.4) and its repositories also support binary installations.","title":"Why could install_github be wrong?"},{"location":"vignettes/dratfaq/#can-drat-work-with-binaries","text":"You bet. Jan Schulz provided a careful pull request to provide initial support upon which we have built. As of release 0.1.0, this should just work for both Windows and OS X.","title":"Can drat work with binaries?"},{"location":"vignettes/dratfaq/#can-drat-act-as-an-additional_repositories","text":"Glad you asked! In fact, you can use this GitHub query to find several dozen of packages using Additional_repositories to point to drat repos (still having drat in their name; others may use domain nane such that the search may miss them). One example we used to point to here changed however. So for a more stable use case, one example from my packages: the RcppRedis package points via this line to the ghrr drat to (optionally) use the RcppMsgPack package (which is not on CRAN as it uses a MsgPack release newer than what it in Debian).","title":"Can drat act as an Additional_repositories ?"},{"location":"vignettes/dratfaq/#what-about-the-minicran-package","text":"The miniCRAN package creates self-sufficient repositories by examining the dependency graph and downloading all dependent packages. As such, it is more of complement to drat than an alternative --- and Word is that several people have in fact combined both.","title":"What about the miniCRAN package?"},{"location":"vignettes/dratfaq/#is-there-a-suggested-commit-message-convention","text":"The small helper script getCommitMessageForDrat.sh implements a simple format I have suggested in the past and used: edd@max:~/git/drat(master)$ inst/scripts/getCommitMessageForDrat.sh drat 0.1.0 94248ed git@github.com:eddelbuettel/drat.git edd@max:~/git/drat(master)$ It combined four elements: the package name the current version the current git repository commit hash marker the repository URL. When both source and binary packages are uploaded, I often add (src) or (win) to indicate the type of package committed. This format has worked and could form the basis of a standard, but suggestions and refinements are certainly welcome.","title":"Is there a suggested commit message convention?"},{"location":"vignettes/dratforauthors/","text":"Drat Basics for Package Authors: Distributing Packages Dirk Eddelbuettel 2015-05-24 Drat Overview The drat package makes it trivially easy to deploy package repositories. There are essentially just two ways to use a package repository: 1) You write to the repository as a package author to publish your package; or 1) You read from the reposiory as a package user to install or update one or more packages. This vignette deals with the first case: How to use drat as a package author. A companion vignette for package users is available as well. Case 1: Using GitHub GitHub as a Web Server The core motivation for drat comes from GitHub and its implied web server. As you may know, any GitHub user (or organization) can enable a website for a given repository. All it takes is to create either a git branch named gh-pages (if following the original scheme), or creating a directory docs/ in the main branch. After that, a website should be automatically visible (though you should check under 'Settings'). To make this more explicit, consider a hypothetical user John with account johndoe . Once John creates a repo foo and in it a branch gh-pages (or an activated directory docs/ ), he will have a web address http://johndoe.github.io/foo for this repo. More formally, for a user USER , and a given repo named drat , we can always assume http://USER.github.io/drat . So for you as a package author with a given GitHub account, all that is needed is a repository named drat with a gh-pages branch. If you are familiar with git at the command-line, you can just create the branch (and the src/contrib/ directory structure in it; see below). If you are less familiar with git, a really easy shortcut is to simply fork the actual drat repo. It contains the drat source code which you could keep, or remove. The fork only serves to set up the required directory layout, and the src/contrib/ directory. Place Files into the Local Repo We can now assume that you have a local git repository named drat with a subdirectory src containing a further subdirectory contrib . You are now ready to insert a package into it. For simplicit, let us assume the package is named myPkg and is at version 0.5. So R CMD build created a file myPkg_0.5.tar.gz . Then via ## insert given package into default drat repo on local file system drat::insertPackage(\"myPkg_0.5.tar.gz\") the source package will be copied into the default drat repo at location ~/git/drat . Should your git repository checkouts live in a different place on your machine, just specify this either via the options() entry \"dratRepo\" or directly: ## insert given package into given repo on local file system drat::insertPackage(\"myPkg_0.5.tar.gz\", \"/srv/projects/git/drat\") In either case, the package will be copied into the repo, and the PACKAGES file will be updated. Lastly, if you have git (the command-line tool) or the wicked git2r package installed, then you can also use the commit=TRUE option to have the new files added and committed. Neither of these variant pushes, so that last step is left to the user (as it commonly requires authentication). GitHub and Travis Integration Colin Gillespie has provided a nice walk-through of how to have Travis CI automagically push packages into a drat repo. This is included as another (currently work-in-progress) vignette entitled Combining Drat And Travis which can be found in the drat package just like this vignette. Case 2: Using Another Server or Local Storage Use of drat is not limited to GitHub. Any server you can write files to, and serve via http or file access from is suitable. A common use case may be a local repository within a work group or deparment, meant to be locally accessible but not from an outside network. Place Files into the Local Repo This is similar to the usage described above. Suppose that you are part of groupABC which has access to directory on shared filesystem somewhere, say under /nfs/groups/groupABC/ where you created a directory drat within a directory R . We once again require that the resulting directory /nfs/groups/groupABC/R/drat contains a src/contrib directory structure. Hence, the following command would copy the package and update the index files: ## insert given package into given repo on a network-local file system drat::insertPackage(\"myPkg_0.5.tar.gz\", \"file://nfs/groups/groupABC/R/drat\") This updates the PACKAGES file (and its compressed variant) after which the repository is ready to serve files. See the companion vignette for how to deploy it. Note that the location URL should begin with file: . Summary drat permits package authors to add packages very easily to R package repositories. These repositories can be public, and GitHub provides a very natural option to serve a package repository via the web server (based on either the gh-pages branch of a drat or a docs/ directory) to serve as GitHub Pages. Repositories can also be local (and private) as well: all that drat requires to add packages is write access to a directory. Lastly, serving that directory as a repository then requires a web server (easiest via the automatic GitHub repo option) or other file access. How to access packages from drat repository is described in the companion vignette .","title":"Drat for Package Authors"},{"location":"vignettes/dratforauthors/#drat-basics-for-package-authors-distributing-packages","text":"Dirk Eddelbuettel 2015-05-24","title":"Drat Basics for Package Authors: Distributing Packages"},{"location":"vignettes/dratforauthors/#drat-overview","text":"The drat package makes it trivially easy to deploy package repositories. There are essentially just two ways to use a package repository: 1) You write to the repository as a package author to publish your package; or 1) You read from the reposiory as a package user to install or update one or more packages. This vignette deals with the first case: How to use drat as a package author. A companion vignette for package users is available as well.","title":"Drat Overview"},{"location":"vignettes/dratforauthors/#case-1-using-github","text":"","title":"Case 1: Using GitHub"},{"location":"vignettes/dratforauthors/#github-as-a-web-server","text":"The core motivation for drat comes from GitHub and its implied web server. As you may know, any GitHub user (or organization) can enable a website for a given repository. All it takes is to create either a git branch named gh-pages (if following the original scheme), or creating a directory docs/ in the main branch. After that, a website should be automatically visible (though you should check under 'Settings'). To make this more explicit, consider a hypothetical user John with account johndoe . Once John creates a repo foo and in it a branch gh-pages (or an activated directory docs/ ), he will have a web address http://johndoe.github.io/foo for this repo. More formally, for a user USER , and a given repo named drat , we can always assume http://USER.github.io/drat . So for you as a package author with a given GitHub account, all that is needed is a repository named drat with a gh-pages branch. If you are familiar with git at the command-line, you can just create the branch (and the src/contrib/ directory structure in it; see below). If you are less familiar with git, a really easy shortcut is to simply fork the actual drat repo. It contains the drat source code which you could keep, or remove. The fork only serves to set up the required directory layout, and the src/contrib/ directory.","title":"GitHub as a Web Server"},{"location":"vignettes/dratforauthors/#place-files-into-the-local-repo","text":"We can now assume that you have a local git repository named drat with a subdirectory src containing a further subdirectory contrib . You are now ready to insert a package into it. For simplicit, let us assume the package is named myPkg and is at version 0.5. So R CMD build created a file myPkg_0.5.tar.gz . Then via ## insert given package into default drat repo on local file system drat::insertPackage(\"myPkg_0.5.tar.gz\") the source package will be copied into the default drat repo at location ~/git/drat . Should your git repository checkouts live in a different place on your machine, just specify this either via the options() entry \"dratRepo\" or directly: ## insert given package into given repo on local file system drat::insertPackage(\"myPkg_0.5.tar.gz\", \"/srv/projects/git/drat\") In either case, the package will be copied into the repo, and the PACKAGES file will be updated. Lastly, if you have git (the command-line tool) or the wicked git2r package installed, then you can also use the commit=TRUE option to have the new files added and committed. Neither of these variant pushes, so that last step is left to the user (as it commonly requires authentication).","title":"Place Files into the Local Repo"},{"location":"vignettes/dratforauthors/#github-and-travis-integration","text":"Colin Gillespie has provided a nice walk-through of how to have Travis CI automagically push packages into a drat repo. This is included as another (currently work-in-progress) vignette entitled Combining Drat And Travis which can be found in the drat package just like this vignette.","title":"GitHub and Travis Integration"},{"location":"vignettes/dratforauthors/#case-2-using-another-server-or-local-storage","text":"Use of drat is not limited to GitHub. Any server you can write files to, and serve via http or file access from is suitable. A common use case may be a local repository within a work group or deparment, meant to be locally accessible but not from an outside network.","title":"Case 2: Using Another Server or Local Storage"},{"location":"vignettes/dratforauthors/#place-files-into-the-local-repo_1","text":"This is similar to the usage described above. Suppose that you are part of groupABC which has access to directory on shared filesystem somewhere, say under /nfs/groups/groupABC/ where you created a directory drat within a directory R . We once again require that the resulting directory /nfs/groups/groupABC/R/drat contains a src/contrib directory structure. Hence, the following command would copy the package and update the index files: ## insert given package into given repo on a network-local file system drat::insertPackage(\"myPkg_0.5.tar.gz\", \"file://nfs/groups/groupABC/R/drat\") This updates the PACKAGES file (and its compressed variant) after which the repository is ready to serve files. See the companion vignette for how to deploy it. Note that the location URL should begin with file: .","title":"Place Files into the Local Repo"},{"location":"vignettes/dratforauthors/#summary","text":"drat permits package authors to add packages very easily to R package repositories. These repositories can be public, and GitHub provides a very natural option to serve a package repository via the web server (based on either the gh-pages branch of a drat or a docs/ directory) to serve as GitHub Pages. Repositories can also be local (and private) as well: all that drat requires to add packages is write access to a directory. Lastly, serving that directory as a repository then requires a web server (easiest via the automatic GitHub repo option) or other file access. How to access packages from drat repository is described in the companion vignette .","title":"Summary"},{"location":"vignettes/dratforusers/","text":"Drat Basics for Package Users: Installing or Updating Packages Dirk Eddelbuettel 2015-05-24 Drat Overview The drat package makes it trivially easy to deploy package repositories. There are essentially just two ways to use a package repository: 1) You write to the repository as a package author to publish your package; or 1) You read from the reposiory as a package user to install or update one or more packages. This vignette deals with the second case: How to use drat as package users. A companion vignette for package authors is available as well. Case 1: Using GitHub drat makes it very easy to use an R package repository hosted on GitHub. It assumes simply that the R package repository is hosted in a GitHub repository named drat . With that, we only need one piece of information: the name of the repository (and if this seem mysterious see the discussion in the companion vignette . So drat::addRepo(\"eddelbuettel\") adds my drat repo (which contains only the drat package in order to keep the footprint of forking small). One can add several repositories at once. The following statements adds the repo for Rcpp and my catch-all ghrr repo: drat::addRepo(c(\"eddelbuettel\", \"RcppCore\", \"ghrr\")) Note that this use a vectorised first argument, rather than three arguments. Case 2: Using Another Repo Sometimes we want to use repositories not conforming to the GitHub drat pattern. This use case may simply be a different URL, or server. Another common (and very useful case) is for a locally hosted repository. In this case we use the two argument form: the first argument sets the name within the repos vector, and the second provides the local (filesystem-based) or remote (web-based) URL: drat::addRepo(\"workgroup\", \"file://nfs/groups/groupABC/R/drat\") where the same local network repository example is used as in the example in the companion vignette . Note that we start the location URL with file: . Summary drat makes it very easy to register additional package repositories. One or more calls to drat::addRepo() is all that it takes as shown above. After that, one can use install.packages() or update.packages() just as before, but with the additional repositories at one's disposal.","title":"Drat for Package Users"},{"location":"vignettes/dratforusers/#drat-basics-for-package-users-installing-or-updating-packages","text":"Dirk Eddelbuettel 2015-05-24","title":"Drat Basics for Package Users: Installing or Updating Packages"},{"location":"vignettes/dratforusers/#drat-overview","text":"The drat package makes it trivially easy to deploy package repositories. There are essentially just two ways to use a package repository: 1) You write to the repository as a package author to publish your package; or 1) You read from the reposiory as a package user to install or update one or more packages. This vignette deals with the second case: How to use drat as package users. A companion vignette for package authors is available as well.","title":"Drat Overview"},{"location":"vignettes/dratforusers/#case-1-using-github","text":"drat makes it very easy to use an R package repository hosted on GitHub. It assumes simply that the R package repository is hosted in a GitHub repository named drat . With that, we only need one piece of information: the name of the repository (and if this seem mysterious see the discussion in the companion vignette . So drat::addRepo(\"eddelbuettel\") adds my drat repo (which contains only the drat package in order to keep the footprint of forking small). One can add several repositories at once. The following statements adds the repo for Rcpp and my catch-all ghrr repo: drat::addRepo(c(\"eddelbuettel\", \"RcppCore\", \"ghrr\")) Note that this use a vectorised first argument, rather than three arguments.","title":"Case 1: Using GitHub"},{"location":"vignettes/dratforusers/#case-2-using-another-repo","text":"Sometimes we want to use repositories not conforming to the GitHub drat pattern. This use case may simply be a different URL, or server. Another common (and very useful case) is for a locally hosted repository. In this case we use the two argument form: the first argument sets the name within the repos vector, and the second provides the local (filesystem-based) or remote (web-based) URL: drat::addRepo(\"workgroup\", \"file://nfs/groups/groupABC/R/drat\") where the same local network repository example is used as in the example in the companion vignette . Note that we start the location URL with file: .","title":"Case 2: Using Another Repo"},{"location":"vignettes/dratforusers/#summary","text":"drat makes it very easy to register additional package repositories. One or more calls to drat::addRepo() is all that it takes as shown above. After that, one can use install.packages() or update.packages() just as before, but with the additional repositories at one's disposal.","title":"Summary"},{"location":"vignettes/dratstepbystep/","text":"Drat Step-By-Step Roman Hornung and Dirk Eddelbuettel Written 2021-Apr-04, update 2021-Jul-09 Overview, Scope and Background This step-by-step tutorial shows how to use drat to let an R package utilise an R package available on some other place that is not CRAN . We will assume GitHub here as the (source) location of the 'other' package, but any other source repository applies equally for the source part of the other package. The situation assumes your package (which you would like to publish on CRAN) has a weak dependency on this other package (which is something CRAN allows via an Additional_repositories entry). We will use this feature here, and have drat be the helper to create one such additional repository. The other package may be written by you, or maybe someone else. Here we assume for simplicity that it is written by someone else, under a suitable license but for whichever reason not on CRAN. So the plan is to get the other package into a drat repo we set up so that your package can refer to it via Additional_repositories in its DESCRIPTION file. We assume the following tools to be available, as well as reasonable familiarity with them: a GitHub account (as we use GitHub to host the drat package repo), R (as all this work is in the context of caring for R packages), git (and some familiarity with git on the command-line). Steps Prepare the dependent package We first prepare the other depended-upon R package so it is ready for upload to the to-be-created (not yet existing) new repository. We start by downloading this R package from its GitHub repository. Go to the GitHub page of the package, e.g. https://github.com/donaldduck/quacking , and click the green \"Code\" button. The \"Clone\" option should have choices for http, ssh, the newer CLI. If you have an ssh key registered at GitHub, choose ssh. Else http is fine (though the frequent password checks get tiring). Hit the little folder icon to copy the URL and paste it into your command-line to form the git clone command: git clone git@github.com:donalduck/quacking This will clone the repository to your local machine which creates a local copy typically used for read-only access. Now that you have the source, create a package from them via R CMD build . inside the quacking repository. This will generate a source file, say quacking_1.2.3.tar.gz , for this repository. (You can also create a binary package if you want, and/or do so from, say, within RStudio. We focus on command-line use here.) Create the drat repository Go to https://github.com/drat-base/drat and fork the repository by clicking the button \"Fork\". You now have a remote copy of that repository named https://github.com/YourName/drat that can serve as your drat repository, and to which we will add your own content below. (There are other ways using e.g. dratInit() but we ignore this here to focus on the start via forking.) Next, we have to ensure your drat repository can server over https. Go to \"Settings\" on https://github.com/YourName/drat and scroll down to \"GitHub Pages\". Specify \"master\" below \"Branch\" and \"docs\" right of it and click \"Save\". GitHub should now state that Your site is ready to be published and list https://YourName.github.io/drat/ as its address. Note that the forked drat repository still contains a copy of the drat sources (in order to be a viable repository.) Once you added your content, you can remove it, or just keep it. Create a local copy of your fork This follows the steps above for creating a local copy of the depended-upon package. Now we bring the freshly-forked drat repository 'home' to your computer. So in the directory in which you keep your git repositories, say git clone https://github.com/YourName/drat or git clone git@github.com:YourName/drat.git depending upon whether you prefer authentication via http or ssh. Ensure you have the drat package This usually entails just a simple install.packages(\"drat\") as drat is on CRAN . However, currently (spring 2021), we also want to ensure you have the most current version of drat that can use docs/ . To ensure this, install drat from its source repo from within R via remotes::install_github(\"eddelbuettel/drat\") (as we are using the drat repo serving from docs/ whereas the CRAN version still defaults to the older scheme of a gh-pages branch.) Now continue in R (and we assume we are in your git working directory with both the cloned dependent quacking repository as well as a drat repo right below the working directory). library(drat) options(dratBranch=\"docs\") # to default to using docs/ as we set up insertPackage(file=c(\"quacking/quacking_1.2.3.tar.gz\", \"quacking/quacking_1.2.3.zip\"), repodir=\"drat/\") In the above \"1.2.3\" is a possible placeholder for the actual version number of the quacking package, just as quacking is a placeholder for your actual package of interest. This will add the quacking source and binary package to the folders drat/docs/src/contrib and drat/docs/bin/windows/contrib/4.0 . If you only have a source package, just omit the binary package ending in .zip . Optionally, change the content of the file drat/README.md to fit your purpose. The file can be also be deleted altogether. Finalising In the terminal, execute cd drat to get into the drat repository. If you use git for the first time, execute: git config --global user.email \"youremail@yourdomainhere\" git config --global user.name \"YourName\" This will tell git your identity. If you want to use ssh , you may want to upload an ssh key; see the relevant GitHub tutorials. Then type: git add . git commit -m \"Added quacking\" git push origin master This will upload the quacking package to the repository on GitHub. (You could add the quacking package version and/or git sha1 to the commit message but that is entirely optional.) Test it To test whether the package can be installed from your new repository, type in R install.packages(\"quacking\", repos=\"https://yourname.github.io/drat\") and verify that the package is installed successfully. (Note that you may have to say type=\"source\" if your operating system prefers source installation and you only added a source version to your drat repository.) Use the drat repo Prepare the DESCRIPTION file of your R package: List the quacking package under Suggests: Add the line Additional_repositories: https://yourname.github.io/drat Test the package via R CMD check --as-cran packageName_0.1.2.tar.gz . If everything passes, you are now ready for submission to CRAN. Additional step If a directory has no content, browsing https://yourname.github.io/drat will show \"404 File not found\". This can upset checks as for example the ones done by CRAN. As of release 0.2.1, drat inserts a minimal placeholder file to avoid this error. Summary This step by step demonstrated how to set up a drat repository to serve an optional package referenced by Additional_repositories and Suggests in a CRAN-compliant way.","title":"Drat Step by Step"},{"location":"vignettes/dratstepbystep/#drat-step-by-step","text":"Roman Hornung and Dirk Eddelbuettel Written 2021-Apr-04, update 2021-Jul-09","title":"Drat Step-By-Step"},{"location":"vignettes/dratstepbystep/#overview-scope-and-background","text":"This step-by-step tutorial shows how to use drat to let an R package utilise an R package available on some other place that is not CRAN . We will assume GitHub here as the (source) location of the 'other' package, but any other source repository applies equally for the source part of the other package. The situation assumes your package (which you would like to publish on CRAN) has a weak dependency on this other package (which is something CRAN allows via an Additional_repositories entry). We will use this feature here, and have drat be the helper to create one such additional repository. The other package may be written by you, or maybe someone else. Here we assume for simplicity that it is written by someone else, under a suitable license but for whichever reason not on CRAN. So the plan is to get the other package into a drat repo we set up so that your package can refer to it via Additional_repositories in its DESCRIPTION file. We assume the following tools to be available, as well as reasonable familiarity with them: a GitHub account (as we use GitHub to host the drat package repo), R (as all this work is in the context of caring for R packages), git (and some familiarity with git on the command-line).","title":"Overview, Scope and Background"},{"location":"vignettes/dratstepbystep/#steps","text":"","title":"Steps"},{"location":"vignettes/dratstepbystep/#prepare-the-dependent-package","text":"We first prepare the other depended-upon R package so it is ready for upload to the to-be-created (not yet existing) new repository. We start by downloading this R package from its GitHub repository. Go to the GitHub page of the package, e.g. https://github.com/donaldduck/quacking , and click the green \"Code\" button. The \"Clone\" option should have choices for http, ssh, the newer CLI. If you have an ssh key registered at GitHub, choose ssh. Else http is fine (though the frequent password checks get tiring). Hit the little folder icon to copy the URL and paste it into your command-line to form the git clone command: git clone git@github.com:donalduck/quacking This will clone the repository to your local machine which creates a local copy typically used for read-only access. Now that you have the source, create a package from them via R CMD build . inside the quacking repository. This will generate a source file, say quacking_1.2.3.tar.gz , for this repository. (You can also create a binary package if you want, and/or do so from, say, within RStudio. We focus on command-line use here.)","title":"Prepare the dependent package"},{"location":"vignettes/dratstepbystep/#create-the-drat-repository","text":"Go to https://github.com/drat-base/drat and fork the repository by clicking the button \"Fork\". You now have a remote copy of that repository named https://github.com/YourName/drat that can serve as your drat repository, and to which we will add your own content below. (There are other ways using e.g. dratInit() but we ignore this here to focus on the start via forking.) Next, we have to ensure your drat repository can server over https. Go to \"Settings\" on https://github.com/YourName/drat and scroll down to \"GitHub Pages\". Specify \"master\" below \"Branch\" and \"docs\" right of it and click \"Save\". GitHub should now state that Your site is ready to be published and list https://YourName.github.io/drat/ as its address. Note that the forked drat repository still contains a copy of the drat sources (in order to be a viable repository.) Once you added your content, you can remove it, or just keep it.","title":"Create the drat repository"},{"location":"vignettes/dratstepbystep/#create-a-local-copy-of-your-fork","text":"This follows the steps above for creating a local copy of the depended-upon package. Now we bring the freshly-forked drat repository 'home' to your computer. So in the directory in which you keep your git repositories, say git clone https://github.com/YourName/drat or git clone git@github.com:YourName/drat.git depending upon whether you prefer authentication via http or ssh.","title":"Create a local copy of your fork"},{"location":"vignettes/dratstepbystep/#ensure-you-have-the-drat-package","text":"This usually entails just a simple install.packages(\"drat\") as drat is on CRAN . However, currently (spring 2021), we also want to ensure you have the most current version of drat that can use docs/ . To ensure this, install drat from its source repo from within R via remotes::install_github(\"eddelbuettel/drat\") (as we are using the drat repo serving from docs/ whereas the CRAN version still defaults to the older scheme of a gh-pages branch.) Now continue in R (and we assume we are in your git working directory with both the cloned dependent quacking repository as well as a drat repo right below the working directory). library(drat) options(dratBranch=\"docs\") # to default to using docs/ as we set up insertPackage(file=c(\"quacking/quacking_1.2.3.tar.gz\", \"quacking/quacking_1.2.3.zip\"), repodir=\"drat/\") In the above \"1.2.3\" is a possible placeholder for the actual version number of the quacking package, just as quacking is a placeholder for your actual package of interest. This will add the quacking source and binary package to the folders drat/docs/src/contrib and drat/docs/bin/windows/contrib/4.0 . If you only have a source package, just omit the binary package ending in .zip . Optionally, change the content of the file drat/README.md to fit your purpose. The file can be also be deleted altogether.","title":"Ensure you have the drat package"},{"location":"vignettes/dratstepbystep/#finalising","text":"In the terminal, execute cd drat to get into the drat repository. If you use git for the first time, execute: git config --global user.email \"youremail@yourdomainhere\" git config --global user.name \"YourName\" This will tell git your identity. If you want to use ssh , you may want to upload an ssh key; see the relevant GitHub tutorials. Then type: git add . git commit -m \"Added quacking\" git push origin master This will upload the quacking package to the repository on GitHub. (You could add the quacking package version and/or git sha1 to the commit message but that is entirely optional.)","title":"Finalising"},{"location":"vignettes/dratstepbystep/#test-it","text":"To test whether the package can be installed from your new repository, type in R install.packages(\"quacking\", repos=\"https://yourname.github.io/drat\") and verify that the package is installed successfully. (Note that you may have to say type=\"source\" if your operating system prefers source installation and you only added a source version to your drat repository.)","title":"Test it"},{"location":"vignettes/dratstepbystep/#use-the-drat-repo","text":"Prepare the DESCRIPTION file of your R package: List the quacking package under Suggests: Add the line Additional_repositories: https://yourname.github.io/drat Test the package via R CMD check --as-cran packageName_0.1.2.tar.gz . If everything passes, you are now ready for submission to CRAN.","title":"Use the drat repo"},{"location":"vignettes/dratstepbystep/#additional-step","text":"If a directory has no content, browsing https://yourname.github.io/drat will show \"404 File not found\". This can upset checks as for example the ones done by CRAN. As of release 0.2.1, drat inserts a minimal placeholder file to avoid this error.","title":"Additional step"},{"location":"vignettes/dratstepbystep/#summary","text":"This step by step demonstrated how to set up a drat repository to serve an optional package referenced by Additional_repositories and Suggests in a CRAN-compliant way.","title":"Summary"},{"location":"vignettes/whydrat/","text":"Why Drat? Steven Pav and Dirk Eddelbuettel 2015-03-27 Note: This was originally a guest post by Steven on Dirk's blog. Why Drat? After playing around with drat for a few days now, my impressions of it are best captured by Dirk's quote: It just works. Demo To get some idea of what I mean by this, suppose you are a happy consumer of R packages, but want access to, say, the latest, greatest releases of my distribution package, sadist . You can simply add the following to your .Rprofile file: drat:::add(\"shabbychef\") After this, you instantly have access to new releases in the github/shabbychef drat store via the package tools you already know and tolerate. You can use install.packages('sadists') to install the sadists package from the drat store, for example. Similarly, if you issue update.packages(ask=FALSE) all the drat stores you have added will be checked for package updates, along with their dependencies which may well come from other repositories including CRAN. Use cases The most obvious use cases are: Micro releases. For package authors, this provides a means to get feedback from the early adopters, but also allows one to push small changes and bug fixes without burning through your CRAN karma (if you have any left). My personal drat store tends to be a few minor releases ahead of my CRAN releases. Local repositories. In my professional life, I write and maintain proprietary packages. Pushing package updates used to involve saving the package .tar.gz to a NAS, then calling something like R CMD INSTALL package_name_0.3.1.9001.tar.gz . This is not something I wanted to ask of my colleagues. With drat, they can instead add the following stanza to .Rprofile: drat:::addRepo('localRepo','file:///mnt/NAS/r/local/drat') , and then rely on update.packages to do the rest. I suspect that in the future, drat might be (ab)used in the following ways: Rolling your own vanilla CRAN mirror, though I suspect there are better existing ways to accomplish this. Patching CRAN. Suppose you found a bug in a package on CRAN (inconceivable!). As it stands now, you email the maintainer, and wait for a fix. Maybe the patch is trivial, but suppose it is never delivered. Now, you can simply make the patch yourself, pick a higher revision number, and stash it in your drat store. The only downside is that eventually the package maintainer might bump their revision number without pushing a fix, and you are stuck in an arms race of version numbers. Forgoing CRAN altogether. While some package maintainers might find this attractive, I think I would prefer a single huge repository, warts and all, to a landscape of a million microrepos. Perhaps some enterprising group will set up a CRAN-like drat store on github, and accept packages by pull request (whether github CDN can or will support the traffic that CRAN does is another matter), but this seems a bit too futuristic for me now. My wish list In exchange for writing this blog post, I get to lobby Dirk for some features in drat: I shudder at the thought of hundreds of tiny drat stores. Perhaps there should be a way to aggregate addRepo commands in some way. This would allow curators to publish their suggested lists of repos. Drat stores are served in the gh-pages branch of a github repo. I wish there were some way to keep the index.html file in that directory reflect the packages present in the sources. Maybe this could be achieved with some canonical RMarkdown code that most people use.","title":"Why Drat ?"},{"location":"vignettes/whydrat/#why-drat","text":"Steven Pav and Dirk Eddelbuettel 2015-03-27 Note: This was originally a guest post by Steven on Dirk's blog.","title":"Why Drat?"},{"location":"vignettes/whydrat/#why-drat_1","text":"After playing around with drat for a few days now, my impressions of it are best captured by Dirk's quote: It just works.","title":"Why Drat?"},{"location":"vignettes/whydrat/#demo","text":"To get some idea of what I mean by this, suppose you are a happy consumer of R packages, but want access to, say, the latest, greatest releases of my distribution package, sadist . You can simply add the following to your .Rprofile file: drat:::add(\"shabbychef\") After this, you instantly have access to new releases in the github/shabbychef drat store via the package tools you already know and tolerate. You can use install.packages('sadists') to install the sadists package from the drat store, for example. Similarly, if you issue update.packages(ask=FALSE) all the drat stores you have added will be checked for package updates, along with their dependencies which may well come from other repositories including CRAN.","title":"Demo"},{"location":"vignettes/whydrat/#use-cases","text":"The most obvious use cases are: Micro releases. For package authors, this provides a means to get feedback from the early adopters, but also allows one to push small changes and bug fixes without burning through your CRAN karma (if you have any left). My personal drat store tends to be a few minor releases ahead of my CRAN releases. Local repositories. In my professional life, I write and maintain proprietary packages. Pushing package updates used to involve saving the package .tar.gz to a NAS, then calling something like R CMD INSTALL package_name_0.3.1.9001.tar.gz . This is not something I wanted to ask of my colleagues. With drat, they can instead add the following stanza to .Rprofile: drat:::addRepo('localRepo','file:///mnt/NAS/r/local/drat') , and then rely on update.packages to do the rest. I suspect that in the future, drat might be (ab)used in the following ways: Rolling your own vanilla CRAN mirror, though I suspect there are better existing ways to accomplish this. Patching CRAN. Suppose you found a bug in a package on CRAN (inconceivable!). As it stands now, you email the maintainer, and wait for a fix. Maybe the patch is trivial, but suppose it is never delivered. Now, you can simply make the patch yourself, pick a higher revision number, and stash it in your drat store. The only downside is that eventually the package maintainer might bump their revision number without pushing a fix, and you are stuck in an arms race of version numbers. Forgoing CRAN altogether. While some package maintainers might find this attractive, I think I would prefer a single huge repository, warts and all, to a landscape of a million microrepos. Perhaps some enterprising group will set up a CRAN-like drat store on github, and accept packages by pull request (whether github CDN can or will support the traffic that CRAN does is another matter), but this seems a bit too futuristic for me now.","title":"Use cases"},{"location":"vignettes/whydrat/#my-wish-list","text":"In exchange for writing this blog post, I get to lobby Dirk for some features in drat: I shudder at the thought of hundreds of tiny drat stores. Perhaps there should be a way to aggregate addRepo commands in some way. This would allow curators to publish their suggested lists of repos. Drat stores are served in the gh-pages branch of a github repo. I wish there were some way to keep the index.html file in that directory reflect the packages present in the sources. Maybe this could be achieved with some canonical RMarkdown code that most people use.","title":"My wish list"}]}